# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AlertHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def grid_alert_history_get(self, **kwargs):  # noqa: E501
        """Lists resolved alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_alert_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] name: The unique name of one or more alert rules
        :param datetime time_triggered_earliest: The earliest time a resolved alert was triggered
        :param datetime time_triggered_latest: The latest time a resolved alert was triggered
        :param list[str] severity: One or more severity levels
        :param list[str] node: Node name(s)
        :param bool inhibited: If true, only return resolved alerts that were inhibited (suppressed by another alert) during their entire lifespan. If false, only return resolved alerts that were not inhibited. If omitted, return both inhibited and uninhibited resolved alerts.
        :return: AlertHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_alert_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.grid_alert_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def grid_alert_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists resolved alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_alert_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] name: The unique name of one or more alert rules
        :param datetime time_triggered_earliest: The earliest time a resolved alert was triggered
        :param datetime time_triggered_latest: The latest time a resolved alert was triggered
        :param list[str] severity: One or more severity levels
        :param list[str] node: Node name(s)
        :param bool inhibited: If true, only return resolved alerts that were inhibited (suppressed by another alert) during their entire lifespan. If false, only return resolved alerts that were not inhibited. If omitted, return both inhibited and uninhibited resolved alerts.
        :return: AlertHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'time_triggered_earliest', 'time_triggered_latest', 'severity', 'node', 'inhibited']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_alert_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name[]', params['name']))  # noqa: E501
            collection_formats['name[]'] = 'multi'  # noqa: E501
        if 'time_triggered_earliest' in params:
            query_params.append(('timeTriggeredEarliest', params['time_triggered_earliest']))  # noqa: E501
        if 'time_triggered_latest' in params:
            query_params.append(('timeTriggeredLatest', params['time_triggered_latest']))  # noqa: E501
        if 'severity' in params:
            query_params.append(('severity[]', params['severity']))  # noqa: E501
            collection_formats['severity[]'] = 'multi'  # noqa: E501
        if 'node' in params:
            query_params.append(('node[]', params['node']))  # noqa: E501
            collection_formats['node[]'] = 'multi'  # noqa: E501
        if 'inhibited' in params:
            query_params.append(('inhibited', params['inhibited']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/grid/alert-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertHistoryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
