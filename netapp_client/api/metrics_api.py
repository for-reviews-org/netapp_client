# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MetricsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def grid_metric_labels_label_values_get(self, label, **kwargs):  # noqa: E501
        """Lists the values for a metric label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_labels_label_values_get(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: label name (required)
        :return: MetricsLabelsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_metric_labels_label_values_get_with_http_info(label, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_metric_labels_label_values_get_with_http_info(label, **kwargs)  # noqa: E501
            return data

    def grid_metric_labels_label_values_get_with_http_info(self, label, **kwargs):  # noqa: E501
        """Lists the values for a metric label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_labels_label_values_get_with_http_info(label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str label: label name (required)
        :return: MetricsLabelsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_metric_labels_label_values_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `grid_metric_labels_label_values_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'label' in params:
            path_params['label'] = params['label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/grid/metric-labels/{label}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsLabelsGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_metric_names_get(self, **kwargs):  # noqa: E501
        """Lists all available metric names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_names_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetricsNamesGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_metric_names_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.grid_metric_names_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def grid_metric_names_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all available metric names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_names_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MetricsNamesGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_metric_names_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/grid/metric-names', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsNamesGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_metric_query_get(self, query, **kwargs):  # noqa: E501
        """Performs an instant metric query at a single point in time  # noqa: E501

        The format of metric queries is controlled by Prometheus. See https://prometheus.io/docs/querying/basics   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_query_get(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Prometheus query string (required)
        :param datetime time: query start, default current time (date-time)
        :param str timeout: timeout (duration)
        :return: MetricsDataGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_metric_query_get_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_metric_query_get_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def grid_metric_query_get_with_http_info(self, query, **kwargs):  # noqa: E501
        """Performs an instant metric query at a single point in time  # noqa: E501

        The format of metric queries is controlled by Prometheus. See https://prometheus.io/docs/querying/basics   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_query_get_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Prometheus query string (required)
        :param datetime time: query start, default current time (date-time)
        :param str timeout: timeout (duration)
        :return: MetricsDataGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'time', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_metric_query_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `grid_metric_query_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/grid/metric-query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsDataGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_metric_query_range_get(self, query, start, end, step, **kwargs):  # noqa: E501
        """Performs a metric query over a range of time  # noqa: E501

        The format of metric queries is controlled by Prometheus. See https://prometheus.io/docs/querying/basics   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_query_range_get(query, start, end, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Prometheus query string (required)
        :param datetime start: query start (date-time) (required)
        :param datetime end: query end (date-time) (required)
        :param str step: step width (duration) (required)
        :param str timeout: timeout (duration)
        :return: MetricsDataGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_metric_query_range_get_with_http_info(query, start, end, step, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_metric_query_range_get_with_http_info(query, start, end, step, **kwargs)  # noqa: E501
            return data

    def grid_metric_query_range_get_with_http_info(self, query, start, end, step, **kwargs):  # noqa: E501
        """Performs a metric query over a range of time  # noqa: E501

        The format of metric queries is controlled by Prometheus. See https://prometheus.io/docs/querying/basics   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_metric_query_range_get_with_http_info(query, start, end, step, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Prometheus query string (required)
        :param datetime start: query start (date-time) (required)
        :param datetime end: query end (date-time) (required)
        :param str step: step width (duration) (required)
        :param str timeout: timeout (duration)
        :return: MetricsDataGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'start', 'end', 'step', 'timeout']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_metric_query_range_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `grid_metric_query_range_get`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `grid_metric_query_range_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `grid_metric_query_range_get`")  # noqa: E501
        # verify the required parameter 'step' is set
        if ('step' not in params or
                params['step'] is None):
            raise ValueError("Missing the required parameter `step` when calling `grid_metric_query_range_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'step' in params:
            query_params.append(('step', params['step']))  # noqa: E501
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/grid/metric-query-range', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsDataGetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
