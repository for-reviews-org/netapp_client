# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpansionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'in_progress': 'bool',
        'error': 'str',
        'configured': 'bool',
        'provision': 'ProvisioningStatus',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'user': 'InitiatingUser2',
        'stages': 'list[ExpansionStageState]'
    }

    attribute_map = {
        'id': 'id',
        'in_progress': 'inProgress',
        'error': 'error',
        'configured': 'configured',
        'provision': 'provision',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'user': 'user',
        'stages': 'stages'
    }

    def __init__(self, id=None, in_progress=None, error=None, configured=None, provision=None, start_time=None, end_time=None, user=None, stages=None):  # noqa: E501
        """ExpansionStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._in_progress = None
        self._error = None
        self._configured = None
        self._provision = None
        self._start_time = None
        self._end_time = None
        self._user = None
        self._stages = None
        self.discriminator = None
        self.id = id
        self.in_progress = in_progress
        self.error = error
        self.configured = configured
        self.provision = provision
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if user is not None:
            self.user = user
        if stages is not None:
            self.stages = stages

    @property
    def id(self):
        """Gets the id of this ExpansionStatus.  # noqa: E501

        the name of the maintenance procedure  # noqa: E501

        :return: The id of this ExpansionStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpansionStatus.

        the name of the maintenance procedure  # noqa: E501

        :param id: The id of this ExpansionStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        allowed_values = ["expansion"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def in_progress(self):
        """Gets the in_progress of this ExpansionStatus.  # noqa: E501

        true if an expansion procedure is currently being configured or is running  # noqa: E501

        :return: The in_progress of this ExpansionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ExpansionStatus.

        true if an expansion procedure is currently being configured or is running  # noqa: E501

        :param in_progress: The in_progress of this ExpansionStatus.  # noqa: E501
        :type: bool
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def error(self):
        """Gets the error of this ExpansionStatus.  # noqa: E501

        an error message if a problem has occurred, otherwise null  # noqa: E501

        :return: The error of this ExpansionStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ExpansionStatus.

        an error message if a problem has occurred, otherwise null  # noqa: E501

        :param error: The error of this ExpansionStatus.  # noqa: E501
        :type: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def configured(self):
        """Gets the configured of this ExpansionStatus.  # noqa: E501

        whether the expansion procedure has been configured  # noqa: E501

        :return: The configured of this ExpansionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this ExpansionStatus.

        whether the expansion procedure has been configured  # noqa: E501

        :param configured: The configured of this ExpansionStatus.  # noqa: E501
        :type: bool
        """
        if configured is None:
            raise ValueError("Invalid value for `configured`, must not be `None`")  # noqa: E501

        self._configured = configured

    @property
    def provision(self):
        """Gets the provision of this ExpansionStatus.  # noqa: E501


        :return: The provision of this ExpansionStatus.  # noqa: E501
        :rtype: ProvisioningStatus
        """
        return self._provision

    @provision.setter
    def provision(self, provision):
        """Sets the provision of this ExpansionStatus.


        :param provision: The provision of this ExpansionStatus.  # noqa: E501
        :type: ProvisioningStatus
        """
        if provision is None:
            raise ValueError("Invalid value for `provision`, must not be `None`")  # noqa: E501

        self._provision = provision

    @property
    def start_time(self):
        """Gets the start_time of this ExpansionStatus.  # noqa: E501

        the date and time when the expansion procedure was started  # noqa: E501

        :return: The start_time of this ExpansionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ExpansionStatus.

        the date and time when the expansion procedure was started  # noqa: E501

        :param start_time: The start_time of this ExpansionStatus.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ExpansionStatus.  # noqa: E501

        the date and time when the expansion procedure completed  # noqa: E501

        :return: The end_time of this ExpansionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ExpansionStatus.

        the date and time when the expansion procedure completed  # noqa: E501

        :param end_time: The end_time of this ExpansionStatus.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def user(self):
        """Gets the user of this ExpansionStatus.  # noqa: E501


        :return: The user of this ExpansionStatus.  # noqa: E501
        :rtype: InitiatingUser2
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ExpansionStatus.


        :param user: The user of this ExpansionStatus.  # noqa: E501
        :type: InitiatingUser2
        """

        self._user = user

    @property
    def stages(self):
        """Gets the stages of this ExpansionStatus.  # noqa: E501

        state of each overall stage of the expansion procedure  # noqa: E501

        :return: The stages of this ExpansionStatus.  # noqa: E501
        :rtype: list[ExpansionStageState]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this ExpansionStatus.

        state of each overall stage of the expansion procedure  # noqa: E501

        :param stages: The stages of this ExpansionStatus.  # noqa: E501
        :type: list[ExpansionStageState]
        """

        self._stages = stages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpansionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpansionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
