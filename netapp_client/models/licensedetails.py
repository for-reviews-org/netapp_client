# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Licensedetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_id': 'str',
        'license_package': 'str',
        'license_type': 'str',
        'license_serial_number': 'str',
        'license_capacity': 'int',
        'license_end_date': 'date',
        'license': 'str',
        'support_end': 'date'
    }

    attribute_map = {
        'system_id': 'systemId',
        'license_package': 'licensePackage',
        'license_type': 'licenseType',
        'license_serial_number': 'licenseSerialNumber',
        'license_capacity': 'licenseCapacity',
        'license_end_date': 'licenseEndDate',
        'license': 'license',
        'support_end': 'supportEnd'
    }

    def __init__(self, system_id=None, license_package=None, license_type=None, license_serial_number=None, license_capacity=None, license_end_date=None, license=None, support_end=None):  # noqa: E501
        """Licensedetails - a model defined in Swagger"""  # noqa: E501
        self._system_id = None
        self._license_package = None
        self._license_type = None
        self._license_serial_number = None
        self._license_capacity = None
        self._license_end_date = None
        self._license = None
        self._support_end = None
        self.discriminator = None
        self.system_id = system_id
        self.license_package = license_package
        self.license_type = license_type
        self.license_serial_number = license_serial_number
        self.license_capacity = license_capacity
        self.license_end_date = license_end_date
        self.license = license
        if support_end is not None:
            self.support_end = support_end

    @property
    def system_id(self):
        """Gets the system_id of this Licensedetails.  # noqa: E501

        StorageGRID System ID  # noqa: E501

        :return: The system_id of this Licensedetails.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Licensedetails.

        StorageGRID System ID  # noqa: E501

        :param system_id: The system_id of this Licensedetails.  # noqa: E501
        :type: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")  # noqa: E501

        self._system_id = system_id

    @property
    def license_package(self):
        """Gets the license_package of this Licensedetails.  # noqa: E501

        license package name  # noqa: E501

        :return: The license_package of this Licensedetails.  # noqa: E501
        :rtype: str
        """
        return self._license_package

    @license_package.setter
    def license_package(self, license_package):
        """Sets the license_package of this Licensedetails.

        license package name  # noqa: E501

        :param license_package: The license_package of this Licensedetails.  # noqa: E501
        :type: str
        """
        if license_package is None:
            raise ValueError("Invalid value for `license_package`, must not be `None`")  # noqa: E501
        allowed_values = ["SG-WEBSCALE", "SG-WHITEBOX-TB"]  # noqa: E501
        if license_package not in allowed_values:
            raise ValueError(
                "Invalid value for `license_package` ({0}), must be one of {1}"  # noqa: E501
                .format(license_package, allowed_values)
            )

        self._license_package = license_package

    @property
    def license_type(self):
        """Gets the license_type of this Licensedetails.  # noqa: E501

        license model type  # noqa: E501

        :return: The license_type of this Licensedetails.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this Licensedetails.

        license model type  # noqa: E501

        :param license_type: The license_type of this Licensedetails.  # noqa: E501
        :type: str
        """
        if license_type is None:
            raise ValueError("Invalid value for `license_type`, must not be `None`")  # noqa: E501

        self._license_type = license_type

    @property
    def license_serial_number(self):
        """Gets the license_serial_number of this Licensedetails.  # noqa: E501

        license serial number  # noqa: E501

        :return: The license_serial_number of this Licensedetails.  # noqa: E501
        :rtype: str
        """
        return self._license_serial_number

    @license_serial_number.setter
    def license_serial_number(self, license_serial_number):
        """Sets the license_serial_number of this Licensedetails.

        license serial number  # noqa: E501

        :param license_serial_number: The license_serial_number of this Licensedetails.  # noqa: E501
        :type: str
        """
        if license_serial_number is None:
            raise ValueError("Invalid value for `license_serial_number`, must not be `None`")  # noqa: E501

        self._license_serial_number = license_serial_number

    @property
    def license_capacity(self):
        """Gets the license_capacity of this Licensedetails.  # noqa: E501

        licensed storage capacity in TB  # noqa: E501

        :return: The license_capacity of this Licensedetails.  # noqa: E501
        :rtype: int
        """
        return self._license_capacity

    @license_capacity.setter
    def license_capacity(self, license_capacity):
        """Sets the license_capacity of this Licensedetails.

        licensed storage capacity in TB  # noqa: E501

        :param license_capacity: The license_capacity of this Licensedetails.  # noqa: E501
        :type: int
        """
        if license_capacity is None:
            raise ValueError("Invalid value for `license_capacity`, must not be `None`")  # noqa: E501

        self._license_capacity = license_capacity

    @property
    def license_end_date(self):
        """Gets the license_end_date of this Licensedetails.  # noqa: E501

        software license end date in UTC  # noqa: E501

        :return: The license_end_date of this Licensedetails.  # noqa: E501
        :rtype: date
        """
        return self._license_end_date

    @license_end_date.setter
    def license_end_date(self, license_end_date):
        """Sets the license_end_date of this Licensedetails.

        software license end date in UTC  # noqa: E501

        :param license_end_date: The license_end_date of this Licensedetails.  # noqa: E501
        :type: date
        """
        if license_end_date is None:
            raise ValueError("Invalid value for `license_end_date`, must not be `None`")  # noqa: E501

        self._license_end_date = license_end_date

    @property
    def license(self):
        """Gets the license of this Licensedetails.  # noqa: E501

        grid license encoded in Base64 (RFC 4648)  # noqa: E501

        :return: The license of this Licensedetails.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Licensedetails.

        grid license encoded in Base64 (RFC 4648)  # noqa: E501

        :param license: The license of this Licensedetails.  # noqa: E501
        :type: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")  # noqa: E501

        self._license = license

    @property
    def support_end(self):
        """Gets the support_end of this Licensedetails.  # noqa: E501

        support service contract end date in UTC  # noqa: E501

        :return: The support_end of this Licensedetails.  # noqa: E501
        :rtype: date
        """
        return self._support_end

    @support_end.setter
    def support_end(self, support_end):
        """Sets the support_end of this Licensedetails.

        support service contract end date in UTC  # noqa: E501

        :param support_end: The support_end of this Licensedetails.  # noqa: E501
        :type: date
        """

        self._support_end = support_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Licensedetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Licensedetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
