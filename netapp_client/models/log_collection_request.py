# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogCollectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passphrase': 'str',
        'nodes': 'list[str]',
        'notes': 'str',
        'range_start': 'datetime',
        'range_end': 'datetime'
    }

    attribute_map = {
        'passphrase': 'passphrase',
        'nodes': 'nodes',
        'notes': 'notes',
        'range_start': 'rangeStart',
        'range_end': 'rangeEnd'
    }

    def __init__(self, passphrase=None, nodes=None, notes=None, range_start=None, range_end=None):  # noqa: E501
        """LogCollectionRequest - a model defined in Swagger"""  # noqa: E501
        self._passphrase = None
        self._nodes = None
        self._notes = None
        self._range_start = None
        self._range_end = None
        self.discriminator = None
        self.passphrase = passphrase
        self.nodes = nodes
        if notes is not None:
            self.notes = notes
        self.range_start = range_start
        self.range_end = range_end

    @property
    def passphrase(self):
        """Gets the passphrase of this LogCollectionRequest.  # noqa: E501

        provisioning passphrase  # noqa: E501

        :return: The passphrase of this LogCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this LogCollectionRequest.

        provisioning passphrase  # noqa: E501

        :param passphrase: The passphrase of this LogCollectionRequest.  # noqa: E501
        :type: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")  # noqa: E501

        self._passphrase = passphrase

    @property
    def nodes(self):
        """Gets the nodes of this LogCollectionRequest.  # noqa: E501

        list of target grid node UUIDs (To find a node ID (UUID), use the health/topology API. Alternatively, go to the Nodes page and select the node, or look in the /etc/node_id file.)  # noqa: E501

        :return: The nodes of this LogCollectionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this LogCollectionRequest.

        list of target grid node UUIDs (To find a node ID (UUID), use the health/topology API. Alternatively, go to the Nodes page and select the node, or look in the /etc/node_id file.)  # noqa: E501

        :param nodes: The nodes of this LogCollectionRequest.  # noqa: E501
        :type: list[str]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def notes(self):
        """Gets the notes of this LogCollectionRequest.  # noqa: E501

        a message to send to technical support  # noqa: E501

        :return: The notes of this LogCollectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this LogCollectionRequest.

        a message to send to technical support  # noqa: E501

        :param notes: The notes of this LogCollectionRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def range_start(self):
        """Gets the range_start of this LogCollectionRequest.  # noqa: E501

        log collection start time  # noqa: E501

        :return: The range_start of this LogCollectionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this LogCollectionRequest.

        log collection start time  # noqa: E501

        :param range_start: The range_start of this LogCollectionRequest.  # noqa: E501
        :type: datetime
        """
        if range_start is None:
            raise ValueError("Invalid value for `range_start`, must not be `None`")  # noqa: E501

        self._range_start = range_start

    @property
    def range_end(self):
        """Gets the range_end of this LogCollectionRequest.  # noqa: E501

        log collection end time  # noqa: E501

        :return: The range_end of this LogCollectionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this LogCollectionRequest.

        log collection end time  # noqa: E501

        :param range_end: The range_end of this LogCollectionRequest.  # noqa: E501
        :type: datetime
        """
        if range_end is None:
            raise ValueError("Invalid value for `range_end`, must not be `None`")  # noqa: E501

        self._range_end = range_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogCollectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogCollectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
