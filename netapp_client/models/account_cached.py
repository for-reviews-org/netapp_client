# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.account import Account  # noqa: F401,E501

class AccountCached(Account):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_bytes': 'int',
        'object_count': 'int'
    }
    if hasattr(Account, "swagger_types"):
        swagger_types.update(Account.swagger_types)

    attribute_map = {
        'data_bytes': 'dataBytes',
        'object_count': 'objectCount'
    }
    if hasattr(Account, "attribute_map"):
        attribute_map.update(Account.attribute_map)

    def __init__(self, data_bytes=None, object_count=None, *args, **kwargs):  # noqa: E501
        """AccountCached - a model defined in Swagger"""  # noqa: E501
        self._data_bytes = None
        self._object_count = None
        self.discriminator = None
        self.data_bytes = data_bytes
        self.object_count = object_count
        Account.__init__(self, *args, **kwargs)

    @property
    def data_bytes(self):
        """Gets the data_bytes of this AccountCached.  # noqa: E501

        logical size in bytes of all objects under this Account  # noqa: E501

        :return: The data_bytes of this AccountCached.  # noqa: E501
        :rtype: int
        """
        return self._data_bytes

    @data_bytes.setter
    def data_bytes(self, data_bytes):
        """Sets the data_bytes of this AccountCached.

        logical size in bytes of all objects under this Account  # noqa: E501

        :param data_bytes: The data_bytes of this AccountCached.  # noqa: E501
        :type: int
        """
        if data_bytes is None:
            raise ValueError("Invalid value for `data_bytes`, must not be `None`")  # noqa: E501

        self._data_bytes = data_bytes

    @property
    def object_count(self):
        """Gets the object_count of this AccountCached.  # noqa: E501

        number of objects under this Account  # noqa: E501

        :return: The object_count of this AccountCached.  # noqa: E501
        :rtype: int
        """
        return self._object_count

    @object_count.setter
    def object_count(self, object_count):
        """Sets the object_count of this AccountCached.

        number of objects under this Account  # noqa: E501

        :param object_count: The object_count of this AccountCached.  # noqa: E501
        :type: int
        """
        if object_count is None:
            raise ValueError("Invalid value for `object_count`, must not be `None`")  # noqa: E501

        self._object_count = object_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCached, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCached):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
