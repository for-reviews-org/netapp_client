# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netapp_client.models.ilm_policy_common import IlmPolicyCommon  # noqa: F401,E501

class IlmPolicy(IlmPolicyCommon):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'historical': 'bool',
        'activation_time': 'datetime'
    }
    if hasattr(IlmPolicyCommon, "swagger_types"):
        swagger_types.update(IlmPolicyCommon.swagger_types)

    attribute_map = {
        'id': 'id',
        'historical': 'historical',
        'activation_time': 'activationTime'
    }
    if hasattr(IlmPolicyCommon, "attribute_map"):
        attribute_map.update(IlmPolicyCommon.attribute_map)

    def __init__(self, id=None, historical=False, activation_time=None, *args, **kwargs):  # noqa: E501
        """IlmPolicy - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._historical = None
        self._activation_time = None
        self.discriminator = None
        self.id = id
        if historical is not None:
            self.historical = historical
        if activation_time is not None:
            self.activation_time = activation_time
        IlmPolicyCommon.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this IlmPolicy.  # noqa: E501

        a UUID (generated automatically)  # noqa: E501

        :return: The id of this IlmPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IlmPolicy.

        a UUID (generated automatically)  # noqa: E501

        :param id: The id of this IlmPolicy.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def historical(self):
        """Gets the historical of this IlmPolicy.  # noqa: E501

        indicates whether the ILM policy is historical (false if omitted, generated automatically)  # noqa: E501

        :return: The historical of this IlmPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._historical

    @historical.setter
    def historical(self, historical):
        """Sets the historical of this IlmPolicy.

        indicates whether the ILM policy is historical (false if omitted, generated automatically)  # noqa: E501

        :param historical: The historical of this IlmPolicy.  # noqa: E501
        :type: bool
        """

        self._historical = historical

    @property
    def activation_time(self):
        """Gets the activation_time of this IlmPolicy.  # noqa: E501

        ISO 8601 timestamp indicating the date and time the policy was activated (generated automatically)  # noqa: E501

        :return: The activation_time of this IlmPolicy.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this IlmPolicy.

        ISO 8601 timestamp indicating the date and time the policy was activated (generated automatically)  # noqa: E501

        :param activation_time: The activation_time of this IlmPolicy.  # noqa: E501
        :type: datetime
        """

        self._activation_time = activation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlmPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlmPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
