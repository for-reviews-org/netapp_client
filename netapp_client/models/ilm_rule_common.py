# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IlmRuleCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ingest_behavior': 'str',
        'tenant_account_id': 'str',
        'bucket_filter': 'BucketFilter',
        'api': 'IlmApi',
        'reference_time': 'str',
        'logical_operator': 'str',
        'filters': 'list[IlmFilter]',
        'placements': 'list[IlmPlacement]'
    }

    attribute_map = {
        'ingest_behavior': 'ingestBehavior',
        'tenant_account_id': 'tenantAccountId',
        'bucket_filter': 'bucketFilter',
        'api': 'api',
        'reference_time': 'referenceTime',
        'logical_operator': 'logicalOperator',
        'filters': 'filters',
        'placements': 'placements'
    }

    def __init__(self, ingest_behavior='dual-commit', tenant_account_id=None, bucket_filter=None, api=None, reference_time='ingestTime', logical_operator=None, filters=None, placements=None):  # noqa: E501
        """IlmRuleCommon - a model defined in Swagger"""  # noqa: E501
        self._ingest_behavior = None
        self._tenant_account_id = None
        self._bucket_filter = None
        self._api = None
        self._reference_time = None
        self._logical_operator = None
        self._filters = None
        self._placements = None
        self.discriminator = None
        if ingest_behavior is not None:
            self.ingest_behavior = ingest_behavior
        if tenant_account_id is not None:
            self.tenant_account_id = tenant_account_id
        if bucket_filter is not None:
            self.bucket_filter = bucket_filter
        if api is not None:
            self.api = api
        self.reference_time = reference_time
        if logical_operator is not None:
            self.logical_operator = logical_operator
        self.filters = filters
        self.placements = placements

    @property
    def ingest_behavior(self):
        """Gets the ingest_behavior of this IlmRuleCommon.  # noqa: E501

        how objects matching this rule are stored on ingest. 'dual-commit' creates interim copies and applies the rule later. 'strict' and 'balanced' immediately create the copies specified in the rule’s day 0 instructions. 'balanced' uses 'dual-commit' if following the rule instructions is not possible.  # noqa: E501

        :return: The ingest_behavior of this IlmRuleCommon.  # noqa: E501
        :rtype: str
        """
        return self._ingest_behavior

    @ingest_behavior.setter
    def ingest_behavior(self, ingest_behavior):
        """Sets the ingest_behavior of this IlmRuleCommon.

        how objects matching this rule are stored on ingest. 'dual-commit' creates interim copies and applies the rule later. 'strict' and 'balanced' immediately create the copies specified in the rule’s day 0 instructions. 'balanced' uses 'dual-commit' if following the rule instructions is not possible.  # noqa: E501

        :param ingest_behavior: The ingest_behavior of this IlmRuleCommon.  # noqa: E501
        :type: str
        """
        allowed_values = ["strict", "balanced", "dual-commit"]  # noqa: E501
        if ingest_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `ingest_behavior` ({0}), must be one of {1}"  # noqa: E501
                .format(ingest_behavior, allowed_values)
            )

        self._ingest_behavior = ingest_behavior

    @property
    def tenant_account_id(self):
        """Gets the tenant_account_id of this IlmRuleCommon.  # noqa: E501

        One or more S3 or Swift tenant account IDs to which the ILM rule applies, specified as comma-separated values. If omitted, applies to all objects.  # noqa: E501

        :return: The tenant_account_id of this IlmRuleCommon.  # noqa: E501
        :rtype: str
        """
        return self._tenant_account_id

    @tenant_account_id.setter
    def tenant_account_id(self, tenant_account_id):
        """Sets the tenant_account_id of this IlmRuleCommon.

        One or more S3 or Swift tenant account IDs to which the ILM rule applies, specified as comma-separated values. If omitted, applies to all objects.  # noqa: E501

        :param tenant_account_id: The tenant_account_id of this IlmRuleCommon.  # noqa: E501
        :type: str
        """

        self._tenant_account_id = tenant_account_id

    @property
    def bucket_filter(self):
        """Gets the bucket_filter of this IlmRuleCommon.  # noqa: E501


        :return: The bucket_filter of this IlmRuleCommon.  # noqa: E501
        :rtype: BucketFilter
        """
        return self._bucket_filter

    @bucket_filter.setter
    def bucket_filter(self, bucket_filter):
        """Sets the bucket_filter of this IlmRuleCommon.


        :param bucket_filter: The bucket_filter of this IlmRuleCommon.  # noqa: E501
        :type: BucketFilter
        """

        self._bucket_filter = bucket_filter

    @property
    def api(self):
        """Gets the api of this IlmRuleCommon.  # noqa: E501


        :return: The api of this IlmRuleCommon.  # noqa: E501
        :rtype: IlmApi
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this IlmRuleCommon.


        :param api: The api of this IlmRuleCommon.  # noqa: E501
        :type: IlmApi
        """

        self._api = api

    @property
    def reference_time(self):
        """Gets the reference_time of this IlmRuleCommon.  # noqa: E501

        indicates the time from which the ILM rule is applied  # noqa: E501

        :return: The reference_time of this IlmRuleCommon.  # noqa: E501
        :rtype: str
        """
        return self._reference_time

    @reference_time.setter
    def reference_time(self, reference_time):
        """Sets the reference_time of this IlmRuleCommon.

        indicates the time from which the ILM rule is applied  # noqa: E501

        :param reference_time: The reference_time of this IlmRuleCommon.  # noqa: E501
        :type: str
        """
        if reference_time is None:
            raise ValueError("Invalid value for `reference_time`, must not be `None`")  # noqa: E501
        allowed_values = ["ingestTime", "lastAccessTime", "noncurrentTime", "userDefinedCreationTime"]  # noqa: E501
        if reference_time not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_time` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_time, allowed_values)
            )

        self._reference_time = reference_time

    @property
    def logical_operator(self):
        """Gets the logical_operator of this IlmRuleCommon.  # noqa: E501

        logical operator connecting filter criterion. Mandatory if ILM rule has more than one filter  # noqa: E501

        :return: The logical_operator of this IlmRuleCommon.  # noqa: E501
        :rtype: str
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this IlmRuleCommon.

        logical operator connecting filter criterion. Mandatory if ILM rule has more than one filter  # noqa: E501

        :param logical_operator: The logical_operator of this IlmRuleCommon.  # noqa: E501
        :type: str
        """
        allowed_values = ["or"]  # noqa: E501
        if logical_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(logical_operator, allowed_values)
            )

        self._logical_operator = logical_operator

    @property
    def filters(self):
        """Gets the filters of this IlmRuleCommon.  # noqa: E501

        filtering criteria used to determine if the ILM rule shall be applied to the evaluated object. An ILM rule without filters applies to all objects  # noqa: E501

        :return: The filters of this IlmRuleCommon.  # noqa: E501
        :rtype: list[IlmFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this IlmRuleCommon.

        filtering criteria used to determine if the ILM rule shall be applied to the evaluated object. An ILM rule without filters applies to all objects  # noqa: E501

        :param filters: The filters of this IlmRuleCommon.  # noqa: E501
        :type: list[IlmFilter]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def placements(self):
        """Gets the placements of this IlmRuleCommon.  # noqa: E501

        specifies where and how object data that matches the ILM rule is stored  # noqa: E501

        :return: The placements of this IlmRuleCommon.  # noqa: E501
        :rtype: list[IlmPlacement]
        """
        return self._placements

    @placements.setter
    def placements(self, placements):
        """Sets the placements of this IlmRuleCommon.

        specifies where and how object data that matches the ILM rule is stored  # noqa: E501

        :param placements: The placements of this IlmRuleCommon.  # noqa: E501
        :type: list[IlmPlacement]
        """
        if placements is None:
            raise ValueError("Invalid value for `placements`, must not be `None`")  # noqa: E501

        self._placements = placements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlmRuleCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlmRuleCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
