# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditLevels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system': 'str',
        'storage': 'str',
        'management': 'str',
        'client_reads': 'str',
        'client_writes': 'str'
    }

    attribute_map = {
        'system': 'system',
        'storage': 'storage',
        'management': 'management',
        'client_reads': 'clientReads',
        'client_writes': 'clientWrites'
    }

    def __init__(self, system=None, storage=None, management=None, client_reads=None, client_writes=None):  # noqa: E501
        """AuditLevels - a model defined in Swagger"""  # noqa: E501
        self._system = None
        self._storage = None
        self._management = None
        self._client_reads = None
        self._client_writes = None
        self.discriminator = None
        self.system = system
        self.storage = storage
        self.management = management
        self.client_reads = client_reads
        self.client_writes = client_writes

    @property
    def system(self):
        """Gets the system of this AuditLevels.  # noqa: E501

        the level of audit message for events related to the auditing system itself, grid node states, grid tasks, and service backup operations.   # noqa: E501

        :return: The system of this AuditLevels.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this AuditLevels.

        the level of audit message for events related to the auditing system itself, grid node states, grid tasks, and service backup operations.   # noqa: E501

        :param system: The system of this AuditLevels.  # noqa: E501
        :type: str
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501
        allowed_values = ["off", "error", "normal", "debug"]  # noqa: E501
        if system not in allowed_values:
            raise ValueError(
                "Invalid value for `system` ({0}), must be one of {1}"  # noqa: E501
                .format(system, allowed_values)
            )

        self._system = system

    @property
    def storage(self):
        """Gets the storage of this AuditLevels.  # noqa: E501

        the level of audit message for events related to object storage and retrievals, grid-node to grid-node transfers, validations, purges, and verifications.   # noqa: E501

        :return: The storage of this AuditLevels.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this AuditLevels.

        the level of audit message for events related to object storage and retrievals, grid-node to grid-node transfers, validations, purges, and verifications.   # noqa: E501

        :param storage: The storage of this AuditLevels.  # noqa: E501
        :type: str
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")  # noqa: E501
        allowed_values = ["off", "error", "normal", "debug"]  # noqa: E501
        if storage not in allowed_values:
            raise ValueError(
                "Invalid value for `storage` ({0}), must be one of {1}"  # noqa: E501
                .format(storage, allowed_values)
            )

        self._storage = storage

    @property
    def management(self):
        """Gets the management of this AuditLevels.  # noqa: E501

        the level of audit message for management API operation events.  # noqa: E501

        :return: The management of this AuditLevels.  # noqa: E501
        :rtype: str
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this AuditLevels.

        the level of audit message for management API operation events.  # noqa: E501

        :param management: The management of this AuditLevels.  # noqa: E501
        :type: str
        """
        if management is None:
            raise ValueError("Invalid value for `management`, must not be `None`")  # noqa: E501
        allowed_values = ["off", "error", "normal", "debug"]  # noqa: E501
        if management not in allowed_values:
            raise ValueError(
                "Invalid value for `management` ({0}), must be one of {1}"  # noqa: E501
                .format(management, allowed_values)
            )

        self._management = management

    @property
    def client_reads(self):
        """Gets the client_reads of this AuditLevels.  # noqa: E501

        the level of audit message for events related to client application requests to retrieve objects.  # noqa: E501

        :return: The client_reads of this AuditLevels.  # noqa: E501
        :rtype: str
        """
        return self._client_reads

    @client_reads.setter
    def client_reads(self, client_reads):
        """Sets the client_reads of this AuditLevels.

        the level of audit message for events related to client application requests to retrieve objects.  # noqa: E501

        :param client_reads: The client_reads of this AuditLevels.  # noqa: E501
        :type: str
        """
        if client_reads is None:
            raise ValueError("Invalid value for `client_reads`, must not be `None`")  # noqa: E501
        allowed_values = ["off", "error", "normal", "debug"]  # noqa: E501
        if client_reads not in allowed_values:
            raise ValueError(
                "Invalid value for `client_reads` ({0}), must be one of {1}"  # noqa: E501
                .format(client_reads, allowed_values)
            )

        self._client_reads = client_reads

    @property
    def client_writes(self):
        """Gets the client_writes of this AuditLevels.  # noqa: E501

        the level of audit message for events related to client application requests to create or modify objects.  # noqa: E501

        :return: The client_writes of this AuditLevels.  # noqa: E501
        :rtype: str
        """
        return self._client_writes

    @client_writes.setter
    def client_writes(self, client_writes):
        """Sets the client_writes of this AuditLevels.

        the level of audit message for events related to client application requests to create or modify objects.  # noqa: E501

        :param client_writes: The client_writes of this AuditLevels.  # noqa: E501
        :type: str
        """
        if client_writes is None:
            raise ValueError("Invalid value for `client_writes`, must not be `None`")  # noqa: E501
        allowed_values = ["off", "error", "normal", "debug"]  # noqa: E501
        if client_writes not in allowed_values:
            raise ValueError(
                "Invalid value for `client_writes` ({0}), must be one of {1}"  # noqa: E501
                .format(client_writes, allowed_values)
            )

        self._client_writes = client_writes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLevels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLevels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
