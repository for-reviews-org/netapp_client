# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecoveryNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'site': 'str',
        'name': 'str',
        'ntp_role': 'str',
        'has_adc': 'bool',
        'type': 'str',
        'is_primary_admin': 'bool',
        'configured': 'bool',
        'networks': 'NodeNetworks',
        'hardware': 'Hardware',
        'progress': 'Progress',
        'current_cassandra_data': 'int',
        'estimated_cassandra_data': 'int',
        'site_cassandra_data': 'int'
    }

    attribute_map = {
        'id': 'id',
        'site': 'site',
        'name': 'name',
        'ntp_role': 'ntpRole',
        'has_adc': 'hasAdc',
        'type': 'type',
        'is_primary_admin': 'isPrimaryAdmin',
        'configured': 'configured',
        'networks': 'networks',
        'hardware': 'hardware',
        'progress': 'progress',
        'current_cassandra_data': 'currentCassandraData',
        'estimated_cassandra_data': 'estimatedCassandraData',
        'site_cassandra_data': 'siteCassandraData'
    }

    def __init__(self, id=None, site=None, name=None, ntp_role=None, has_adc=None, type=None, is_primary_admin=None, configured=None, networks=None, hardware=None, progress=None, current_cassandra_data=None, estimated_cassandra_data=None, site_cassandra_data=None):  # noqa: E501
        """RecoveryNode - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._site = None
        self._name = None
        self._ntp_role = None
        self._has_adc = None
        self._type = None
        self._is_primary_admin = None
        self._configured = None
        self._networks = None
        self._hardware = None
        self._progress = None
        self._current_cassandra_data = None
        self._estimated_cassandra_data = None
        self._site_cassandra_data = None
        self.discriminator = None
        self.id = id
        if site is not None:
            self.site = site
        self.name = name
        if ntp_role is not None:
            self.ntp_role = ntp_role
        if has_adc is not None:
            self.has_adc = has_adc
        self.type = type
        if is_primary_admin is not None:
            self.is_primary_admin = is_primary_admin
        self.configured = configured
        self.networks = networks
        self.hardware = hardware
        self.progress = progress
        if current_cassandra_data is not None:
            self.current_cassandra_data = current_cassandra_data
        if estimated_cassandra_data is not None:
            self.estimated_cassandra_data = estimated_cassandra_data
        if site_cassandra_data is not None:
            self.site_cassandra_data = site_cassandra_data

    @property
    def id(self):
        """Gets the id of this RecoveryNode.  # noqa: E501

        a unique identifier for the node (automatically assigned when the node is created)  # noqa: E501

        :return: The id of this RecoveryNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecoveryNode.

        a unique identifier for the node (automatically assigned when the node is created)  # noqa: E501

        :param id: The id of this RecoveryNode.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def site(self):
        """Gets the site of this RecoveryNode.  # noqa: E501

        the id of the site to which the node is assigned  # noqa: E501

        :return: The site of this RecoveryNode.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this RecoveryNode.

        the id of the site to which the node is assigned  # noqa: E501

        :param site: The site of this RecoveryNode.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def name(self):
        """Gets the name of this RecoveryNode.  # noqa: E501

        the name of the node (must be a valid hostname)  # noqa: E501

        :return: The name of this RecoveryNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecoveryNode.

        the name of the node (must be a valid hostname)  # noqa: E501

        :param name: The name of this RecoveryNode.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ntp_role(self):
        """Gets the ntp_role of this RecoveryNode.  # noqa: E501

        the NTP role assigned to the node, or null to determine automatically  # noqa: E501

        :return: The ntp_role of this RecoveryNode.  # noqa: E501
        :rtype: str
        """
        return self._ntp_role

    @ntp_role.setter
    def ntp_role(self, ntp_role):
        """Sets the ntp_role of this RecoveryNode.

        the NTP role assigned to the node, or null to determine automatically  # noqa: E501

        :param ntp_role: The ntp_role of this RecoveryNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["primary", "client"]  # noqa: E501
        if ntp_role not in allowed_values:
            raise ValueError(
                "Invalid value for `ntp_role` ({0}), must be one of {1}"  # noqa: E501
                .format(ntp_role, allowed_values)
            )

        self._ntp_role = ntp_role

    @property
    def has_adc(self):
        """Gets the has_adc of this RecoveryNode.  # noqa: E501

        whether the grid node has an ADC (Administrative Domain Controller) service, or null to determine automatically; at least three Storage Nodes per site must contain an ADC service   # noqa: E501

        :return: The has_adc of this RecoveryNode.  # noqa: E501
        :rtype: bool
        """
        return self._has_adc

    @has_adc.setter
    def has_adc(self, has_adc):
        """Sets the has_adc of this RecoveryNode.

        whether the grid node has an ADC (Administrative Domain Controller) service, or null to determine automatically; at least three Storage Nodes per site must contain an ADC service   # noqa: E501

        :param has_adc: The has_adc of this RecoveryNode.  # noqa: E501
        :type: bool
        """

        self._has_adc = has_adc

    @property
    def type(self):
        """Gets the type of this RecoveryNode.  # noqa: E501

        the node type  # noqa: E501

        :return: The type of this RecoveryNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecoveryNode.

        the node type  # noqa: E501

        :param type: The type of this RecoveryNode.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["adminNode", "apiGatewayNode", "archiveNode", "storageNode"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_primary_admin(self):
        """Gets the is_primary_admin of this RecoveryNode.  # noqa: E501

        whether this Admin Node is the primary Admin Node, or null if this node is not an Admin Node; immutable   # noqa: E501

        :return: The is_primary_admin of this RecoveryNode.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_admin

    @is_primary_admin.setter
    def is_primary_admin(self, is_primary_admin):
        """Sets the is_primary_admin of this RecoveryNode.

        whether this Admin Node is the primary Admin Node, or null if this node is not an Admin Node; immutable   # noqa: E501

        :param is_primary_admin: The is_primary_admin of this RecoveryNode.  # noqa: E501
        :type: bool
        """

        self._is_primary_admin = is_primary_admin

    @property
    def configured(self):
        """Gets the configured of this RecoveryNode.  # noqa: E501

        whether required properties for this node have been configured and the node has been added to a site   # noqa: E501

        :return: The configured of this RecoveryNode.  # noqa: E501
        :rtype: bool
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this RecoveryNode.

        whether required properties for this node have been configured and the node has been added to a site   # noqa: E501

        :param configured: The configured of this RecoveryNode.  # noqa: E501
        :type: bool
        """
        if configured is None:
            raise ValueError("Invalid value for `configured`, must not be `None`")  # noqa: E501

        self._configured = configured

    @property
    def networks(self):
        """Gets the networks of this RecoveryNode.  # noqa: E501


        :return: The networks of this RecoveryNode.  # noqa: E501
        :rtype: NodeNetworks
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this RecoveryNode.


        :param networks: The networks of this RecoveryNode.  # noqa: E501
        :type: NodeNetworks
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")  # noqa: E501

        self._networks = networks

    @property
    def hardware(self):
        """Gets the hardware of this RecoveryNode.  # noqa: E501


        :return: The hardware of this RecoveryNode.  # noqa: E501
        :rtype: Hardware
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this RecoveryNode.


        :param hardware: The hardware of this RecoveryNode.  # noqa: E501
        :type: Hardware
        """
        if hardware is None:
            raise ValueError("Invalid value for `hardware`, must not be `None`")  # noqa: E501

        self._hardware = hardware

    @property
    def progress(self):
        """Gets the progress of this RecoveryNode.  # noqa: E501


        :return: The progress of this RecoveryNode.  # noqa: E501
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RecoveryNode.


        :param progress: The progress of this RecoveryNode.  # noqa: E501
        :type: Progress
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def current_cassandra_data(self):
        """Gets the current_cassandra_data of this RecoveryNode.  # noqa: E501

        The number of bytes of Cassandra data currently on the new Storage Node. This number and the Estimated Cassandra Data Load are used to calculate the progress of the Cassandra data streaming stage during an expansion of an existing site.   # noqa: E501

        :return: The current_cassandra_data of this RecoveryNode.  # noqa: E501
        :rtype: int
        """
        return self._current_cassandra_data

    @current_cassandra_data.setter
    def current_cassandra_data(self, current_cassandra_data):
        """Sets the current_cassandra_data of this RecoveryNode.

        The number of bytes of Cassandra data currently on the new Storage Node. This number and the Estimated Cassandra Data Load are used to calculate the progress of the Cassandra data streaming stage during an expansion of an existing site.   # noqa: E501

        :param current_cassandra_data: The current_cassandra_data of this RecoveryNode.  # noqa: E501
        :type: int
        """

        self._current_cassandra_data = current_cassandra_data

    @property
    def estimated_cassandra_data(self):
        """Gets the estimated_cassandra_data of this RecoveryNode.  # noqa: E501

        The total number of bytes of Cassandra data expected for the new Storage Node. This number and the Current Cassandra Data Load are used to calculate the progress of the Cassandra data streaming stage during an expansion of an existing site.   # noqa: E501

        :return: The estimated_cassandra_data of this RecoveryNode.  # noqa: E501
        :rtype: int
        """
        return self._estimated_cassandra_data

    @estimated_cassandra_data.setter
    def estimated_cassandra_data(self, estimated_cassandra_data):
        """Sets the estimated_cassandra_data of this RecoveryNode.

        The total number of bytes of Cassandra data expected for the new Storage Node. This number and the Current Cassandra Data Load are used to calculate the progress of the Cassandra data streaming stage during an expansion of an existing site.   # noqa: E501

        :param estimated_cassandra_data: The estimated_cassandra_data of this RecoveryNode.  # noqa: E501
        :type: int
        """

        self._estimated_cassandra_data = estimated_cassandra_data

    @property
    def site_cassandra_data(self):
        """Gets the site_cassandra_data of this RecoveryNode.  # noqa: E501

        The total number of bytes of Cassandra data in the same site at the start of the expansion. This number is used to calculate the Estimated Cassandra Data Load when data streaming begins during an expansion of an existing site.   # noqa: E501

        :return: The site_cassandra_data of this RecoveryNode.  # noqa: E501
        :rtype: int
        """
        return self._site_cassandra_data

    @site_cassandra_data.setter
    def site_cassandra_data(self, site_cassandra_data):
        """Sets the site_cassandra_data of this RecoveryNode.

        The total number of bytes of Cassandra data in the same site at the start of the expansion. This number is used to calculate the Estimated Cassandra Data Load when data streaming begins during an expansion of an existing site.   # noqa: E501

        :param site_cassandra_data: The site_cassandra_data of this RecoveryNode.  # noqa: E501
        :type: int
        """

        self._site_cassandra_data = site_cassandra_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecoveryNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveryNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
