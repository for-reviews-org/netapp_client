# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogCollectionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'in_progress': 'bool',
        'error': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'file_name': 'str',
        'nodes': 'list[SingleNodeStatus]',
        'notes': 'str',
        'range_start': 'datetime',
        'range_end': 'datetime',
        'percentage': 'int',
        'user': 'InitiatingUser'
    }

    attribute_map = {
        'id': 'id',
        'in_progress': 'inProgress',
        'error': 'error',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'file_name': 'fileName',
        'nodes': 'nodes',
        'notes': 'notes',
        'range_start': 'rangeStart',
        'range_end': 'rangeEnd',
        'percentage': 'percentage',
        'user': 'user'
    }

    def __init__(self, id=None, in_progress=None, error=None, start_time=None, end_time=None, file_name=None, nodes=None, notes=None, range_start=None, range_end=None, percentage=None, user=None):  # noqa: E501
        """LogCollectionStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._in_progress = None
        self._error = None
        self._start_time = None
        self._end_time = None
        self._file_name = None
        self._nodes = None
        self._notes = None
        self._range_start = None
        self._range_end = None
        self._percentage = None
        self._user = None
        self.discriminator = None
        self.id = id
        self.in_progress = in_progress
        if error is not None:
            self.error = error
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if file_name is not None:
            self.file_name = file_name
        if nodes is not None:
            self.nodes = nodes
        if notes is not None:
            self.notes = notes
        if range_start is not None:
            self.range_start = range_start
        if range_end is not None:
            self.range_end = range_end
        if percentage is not None:
            self.percentage = percentage
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this LogCollectionStatus.  # noqa: E501

        the name of the maintenance procedure  # noqa: E501

        :return: The id of this LogCollectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogCollectionStatus.

        the name of the maintenance procedure  # noqa: E501

        :param id: The id of this LogCollectionStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        allowed_values = ["logs"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def in_progress(self):
        """Gets the in_progress of this LogCollectionStatus.  # noqa: E501

        true if a log collection procedure is in progress  # noqa: E501

        :return: The in_progress of this LogCollectionStatus.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this LogCollectionStatus.

        true if a log collection procedure is in progress  # noqa: E501

        :param in_progress: The in_progress of this LogCollectionStatus.  # noqa: E501
        :type: bool
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def error(self):
        """Gets the error of this LogCollectionStatus.  # noqa: E501

        an error message if a problem has occurred, otherwise null  # noqa: E501

        :return: The error of this LogCollectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this LogCollectionStatus.

        an error message if a problem has occurred, otherwise null  # noqa: E501

        :param error: The error of this LogCollectionStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def start_time(self):
        """Gets the start_time of this LogCollectionStatus.  # noqa: E501

        the date and time when the log collection procedure was started  # noqa: E501

        :return: The start_time of this LogCollectionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LogCollectionStatus.

        the date and time when the log collection procedure was started  # noqa: E501

        :param start_time: The start_time of this LogCollectionStatus.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this LogCollectionStatus.  # noqa: E501

        the date and time when the log collection procedure completed  # noqa: E501

        :return: The end_time of this LogCollectionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this LogCollectionStatus.

        the date and time when the log collection procedure completed  # noqa: E501

        :param end_time: The end_time of this LogCollectionStatus.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def file_name(self):
        """Gets the file_name of this LogCollectionStatus.  # noqa: E501

        the name of the log collection file, or null if not ready to download  # noqa: E501

        :return: The file_name of this LogCollectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this LogCollectionStatus.

        the name of the log collection file, or null if not ready to download  # noqa: E501

        :param file_name: The file_name of this LogCollectionStatus.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def nodes(self):
        """Gets the nodes of this LogCollectionStatus.  # noqa: E501

        status of the log collection on each grid node  # noqa: E501

        :return: The nodes of this LogCollectionStatus.  # noqa: E501
        :rtype: list[SingleNodeStatus]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this LogCollectionStatus.

        status of the log collection on each grid node  # noqa: E501

        :param nodes: The nodes of this LogCollectionStatus.  # noqa: E501
        :type: list[SingleNodeStatus]
        """

        self._nodes = nodes

    @property
    def notes(self):
        """Gets the notes of this LogCollectionStatus.  # noqa: E501

        a message to send to technical support  # noqa: E501

        :return: The notes of this LogCollectionStatus.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this LogCollectionStatus.

        a message to send to technical support  # noqa: E501

        :param notes: The notes of this LogCollectionStatus.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def range_start(self):
        """Gets the range_start of this LogCollectionStatus.  # noqa: E501

        log collection start time  # noqa: E501

        :return: The range_start of this LogCollectionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this LogCollectionStatus.

        log collection start time  # noqa: E501

        :param range_start: The range_start of this LogCollectionStatus.  # noqa: E501
        :type: datetime
        """

        self._range_start = range_start

    @property
    def range_end(self):
        """Gets the range_end of this LogCollectionStatus.  # noqa: E501

        log collection end time  # noqa: E501

        :return: The range_end of this LogCollectionStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this LogCollectionStatus.

        log collection end time  # noqa: E501

        :param range_end: The range_end of this LogCollectionStatus.  # noqa: E501
        :type: datetime
        """

        self._range_end = range_end

    @property
    def percentage(self):
        """Gets the percentage of this LogCollectionStatus.  # noqa: E501

        the total progress percentage for the procedure  # noqa: E501

        :return: The percentage of this LogCollectionStatus.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this LogCollectionStatus.

        the total progress percentage for the procedure  # noqa: E501

        :param percentage: The percentage of this LogCollectionStatus.  # noqa: E501
        :type: int
        """

        self._percentage = percentage

    @property
    def user(self):
        """Gets the user of this LogCollectionStatus.  # noqa: E501


        :return: The user of this LogCollectionStatus.  # noqa: E501
        :rtype: InitiatingUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LogCollectionStatus.


        :param user: The user of this LogCollectionStatus.  # noqa: E501
        :type: InitiatingUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogCollectionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogCollectionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
