# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Hardware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'str',
        'disks': 'list[int]',
        'cpus': 'int',
        'memory': 'int',
        'nft_supported': 'bool',
        'networks': 'NodeNetworks'
    }

    attribute_map = {
        'platform': 'platform',
        'disks': 'disks',
        'cpus': 'cpus',
        'memory': 'memory',
        'nft_supported': 'nftSupported',
        'networks': 'networks'
    }

    def __init__(self, platform=None, disks=None, cpus=None, memory=None, nft_supported=None, networks=None):  # noqa: E501
        """Hardware - a model defined in Swagger"""  # noqa: E501
        self._platform = None
        self._disks = None
        self._cpus = None
        self._memory = None
        self._nft_supported = None
        self._networks = None
        self.discriminator = None
        self.platform = platform
        self.disks = disks
        if cpus is not None:
            self.cpus = cpus
        if memory is not None:
            self.memory = memory
        if nft_supported is not None:
            self.nft_supported = nft_supported
        if networks is not None:
            self.networks = networks

    @property
    def platform(self):
        """Gets the platform of this Hardware.  # noqa: E501

        hardware platform  # noqa: E501

        :return: The platform of this Hardware.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Hardware.

        hardware platform  # noqa: E501

        :param platform: The platform of this Hardware.  # noqa: E501
        :type: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def disks(self):
        """Gets the disks of this Hardware.  # noqa: E501

        the size of each hard disk attached to the grid node (in bytes)  # noqa: E501

        :return: The disks of this Hardware.  # noqa: E501
        :rtype: list[int]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this Hardware.

        the size of each hard disk attached to the grid node (in bytes)  # noqa: E501

        :param disks: The disks of this Hardware.  # noqa: E501
        :type: list[int]
        """
        if disks is None:
            raise ValueError("Invalid value for `disks`, must not be `None`")  # noqa: E501

        self._disks = disks

    @property
    def cpus(self):
        """Gets the cpus of this Hardware.  # noqa: E501

        the number of CPUs attached to the grid node  # noqa: E501

        :return: The cpus of this Hardware.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this Hardware.

        the number of CPUs attached to the grid node  # noqa: E501

        :param cpus: The cpus of this Hardware.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def memory(self):
        """Gets the memory of this Hardware.  # noqa: E501

        the amount of memory (RAM) attached to the grid node (in bytes)  # noqa: E501

        :return: The memory of this Hardware.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Hardware.

        the amount of memory (RAM) attached to the grid node (in bytes)  # noqa: E501

        :param memory: The memory of this Hardware.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def nft_supported(self):
        """Gets the nft_supported of this Hardware.  # noqa: E501

        whether NFT is supported on the platform.  # noqa: E501

        :return: The nft_supported of this Hardware.  # noqa: E501
        :rtype: bool
        """
        return self._nft_supported

    @nft_supported.setter
    def nft_supported(self, nft_supported):
        """Sets the nft_supported of this Hardware.

        whether NFT is supported on the platform.  # noqa: E501

        :param nft_supported: The nft_supported of this Hardware.  # noqa: E501
        :type: bool
        """

        self._nft_supported = nft_supported

    @property
    def networks(self):
        """Gets the networks of this Hardware.  # noqa: E501


        :return: The networks of this Hardware.  # noqa: E501
        :rtype: NodeNetworks
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Hardware.


        :param networks: The networks of this Hardware.  # noqa: E501
        :type: NodeNetworks
        """

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Hardware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hardware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
