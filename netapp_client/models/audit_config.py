# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'levels': 'AuditLevels',
        'logged_headers': 'list[LoggedHeader]'
    }

    attribute_map = {
        'levels': 'levels',
        'logged_headers': 'loggedHeaders'
    }

    def __init__(self, levels=None, logged_headers=None):  # noqa: E501
        """AuditConfig - a model defined in Swagger"""  # noqa: E501
        self._levels = None
        self._logged_headers = None
        self.discriminator = None
        self.levels = levels
        self.logged_headers = logged_headers

    @property
    def levels(self):
        """Gets the levels of this AuditConfig.  # noqa: E501


        :return: The levels of this AuditConfig.  # noqa: E501
        :rtype: AuditLevels
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this AuditConfig.


        :param levels: The levels of this AuditConfig.  # noqa: E501
        :type: AuditLevels
        """
        if levels is None:
            raise ValueError("Invalid value for `levels`, must not be `None`")  # noqa: E501

        self._levels = levels

    @property
    def logged_headers(self):
        """Gets the logged_headers of this AuditConfig.  # noqa: E501

        names of S3/Swift HTTP request headers to include in audit messages (Use a wildcard \"\\*\" to match zero or more characters. Use the escape sequence \"\\\\*\" to match a literal asterisk.)   # noqa: E501

        :return: The logged_headers of this AuditConfig.  # noqa: E501
        :rtype: list[LoggedHeader]
        """
        return self._logged_headers

    @logged_headers.setter
    def logged_headers(self, logged_headers):
        """Sets the logged_headers of this AuditConfig.

        names of S3/Swift HTTP request headers to include in audit messages (Use a wildcard \"\\*\" to match zero or more characters. Use the escape sequence \"\\\\*\" to match a literal asterisk.)   # noqa: E501

        :param logged_headers: The logged_headers of this AuditConfig.  # noqa: E501
        :type: list[LoggedHeader]
        """
        if logged_headers is None:
            raise ValueError("Invalid value for `logged_headers`, must not be `None`")  # noqa: E501

        self._logged_headers = logged_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
