# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeStateCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'int',
        'administratively_down': 'int',
        'unknown': 'int'
    }

    attribute_map = {
        'connected': 'connected',
        'administratively_down': 'administratively-down',
        'unknown': 'unknown'
    }

    def __init__(self, connected=None, administratively_down=None, unknown=None):  # noqa: E501
        """NodeStateCounts - a model defined in Swagger"""  # noqa: E501
        self._connected = None
        self._administratively_down = None
        self._unknown = None
        self.discriminator = None
        if connected is not None:
            self.connected = connected
        if administratively_down is not None:
            self.administratively_down = administratively_down
        if unknown is not None:
            self.unknown = unknown

    @property
    def connected(self):
        """Gets the connected of this NodeStateCounts.  # noqa: E501

        the normal state, indicating that the node is connected to the grid  # noqa: E501

        :return: The connected of this NodeStateCounts.  # noqa: E501
        :rtype: int
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this NodeStateCounts.

        the normal state, indicating that the node is connected to the grid  # noqa: E501

        :param connected: The connected of this NodeStateCounts.  # noqa: E501
        :type: int
        """

        self._connected = connected

    @property
    def administratively_down(self):
        """Gets the administratively_down of this NodeStateCounts.  # noqa: E501

        nodes that are expectedly offline as part of the performance of an administrative task   # noqa: E501

        :return: The administratively_down of this NodeStateCounts.  # noqa: E501
        :rtype: int
        """
        return self._administratively_down

    @administratively_down.setter
    def administratively_down(self, administratively_down):
        """Sets the administratively_down of this NodeStateCounts.

        nodes that are expectedly offline as part of the performance of an administrative task   # noqa: E501

        :param administratively_down: The administratively_down of this NodeStateCounts.  # noqa: E501
        :type: int
        """

        self._administratively_down = administratively_down

    @property
    def unknown(self):
        """Gets the unknown of this NodeStateCounts.  # noqa: E501

        nodes that are unexpectedly offline and disconnected from the grid  # noqa: E501

        :return: The unknown of this NodeStateCounts.  # noqa: E501
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this NodeStateCounts.

        nodes that are unexpectedly offline and disconnected from the grid  # noqa: E501

        :param unknown: The unknown of this NodeStateCounts.  # noqa: E501
        :type: int
        """

        self._unknown = unknown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeStateCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStateCounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
