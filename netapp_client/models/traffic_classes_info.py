# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrafficClassesInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policies': 'list[TrafficClassesIdNameMap]',
        'aggregate_in_use': 'bool',
        'per_request_in_use': 'bool'
    }

    attribute_map = {
        'policies': 'policies',
        'aggregate_in_use': 'aggregateInUse',
        'per_request_in_use': 'perRequestInUse'
    }

    def __init__(self, policies=None, aggregate_in_use=None, per_request_in_use=None):  # noqa: E501
        """TrafficClassesInfo - a model defined in Swagger"""  # noqa: E501
        self._policies = None
        self._aggregate_in_use = None
        self._per_request_in_use = None
        self.discriminator = None
        self.policies = policies
        self.aggregate_in_use = aggregate_in_use
        self.per_request_in_use = per_request_in_use

    @property
    def policies(self):
        """Gets the policies of this TrafficClassesInfo.  # noqa: E501


        :return: The policies of this TrafficClassesInfo.  # noqa: E501
        :rtype: list[TrafficClassesIdNameMap]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this TrafficClassesInfo.


        :param policies: The policies of this TrafficClassesInfo.  # noqa: E501
        :type: list[TrafficClassesIdNameMap]
        """
        if policies is None:
            raise ValueError("Invalid value for `policies`, must not be `None`")  # noqa: E501

        self._policies = policies

    @property
    def aggregate_in_use(self):
        """Gets the aggregate_in_use of this TrafficClassesInfo.  # noqa: E501

        True if any policies are using aggregate bandwidth limits  # noqa: E501

        :return: The aggregate_in_use of this TrafficClassesInfo.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate_in_use

    @aggregate_in_use.setter
    def aggregate_in_use(self, aggregate_in_use):
        """Sets the aggregate_in_use of this TrafficClassesInfo.

        True if any policies are using aggregate bandwidth limits  # noqa: E501

        :param aggregate_in_use: The aggregate_in_use of this TrafficClassesInfo.  # noqa: E501
        :type: bool
        """
        if aggregate_in_use is None:
            raise ValueError("Invalid value for `aggregate_in_use`, must not be `None`")  # noqa: E501

        self._aggregate_in_use = aggregate_in_use

    @property
    def per_request_in_use(self):
        """Gets the per_request_in_use of this TrafficClassesInfo.  # noqa: E501

        True if any policies are using per-request bandwidth limits  # noqa: E501

        :return: The per_request_in_use of this TrafficClassesInfo.  # noqa: E501
        :rtype: bool
        """
        return self._per_request_in_use

    @per_request_in_use.setter
    def per_request_in_use(self, per_request_in_use):
        """Sets the per_request_in_use of this TrafficClassesInfo.

        True if any policies are using per-request bandwidth limits  # noqa: E501

        :param per_request_in_use: The per_request_in_use of this TrafficClassesInfo.  # noqa: E501
        :type: bool
        """
        if per_request_in_use is None:
            raise ValueError("Invalid value for `per_request_in_use`, must not be `None`")  # noqa: E501

        self._per_request_in_use = per_request_in_use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrafficClassesInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficClassesInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
