# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertRulePostBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enable': 'bool',
        'expressions': 'AllOfalertRulePostBodyExpressions',
        '_for': 'str',
        'labels': 'dict(str, str)',
        'annotations': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'enable': 'enable',
        'expressions': 'expressions',
        '_for': 'for',
        'labels': 'labels',
        'annotations': 'annotations'
    }

    def __init__(self, name=None, enable=None, expressions=None, _for=None, labels=None, annotations=None):  # noqa: E501
        """AlertRulePostBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._enable = None
        self._expressions = None
        self.__for = None
        self._labels = None
        self._annotations = None
        self.discriminator = None
        self.name = name
        self.enable = enable
        self.expressions = expressions
        self._for = _for
        self.labels = labels
        self.annotations = annotations

    @property
    def name(self):
        """Gets the name of this AlertRulePostBody.  # noqa: E501

        the unique name of the alert rule  # noqa: E501

        :return: The name of this AlertRulePostBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertRulePostBody.

        the unique name of the alert rule  # noqa: E501

        :param name: The name of this AlertRulePostBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enable(self):
        """Gets the enable of this AlertRulePostBody.  # noqa: E501

        whether this alert rule is enabled  # noqa: E501

        :return: The enable of this AlertRulePostBody.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AlertRulePostBody.

        whether this alert rule is enabled  # noqa: E501

        :param enable: The enable of this AlertRulePostBody.  # noqa: E501
        :type: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def expressions(self):
        """Gets the expressions of this AlertRulePostBody.  # noqa: E501


        :return: The expressions of this AlertRulePostBody.  # noqa: E501
        :rtype: AllOfalertRulePostBodyExpressions
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this AlertRulePostBody.


        :param expressions: The expressions of this AlertRulePostBody.  # noqa: E501
        :type: AllOfalertRulePostBodyExpressions
        """
        if expressions is None:
            raise ValueError("Invalid value for `expressions`, must not be `None`")  # noqa: E501

        self._expressions = expressions

    @property
    def _for(self):
        """Gets the _for of this AlertRulePostBody.  # noqa: E501

        how long one or more of the expressions in this rule must evaluate as true before an alert is generated  # noqa: E501

        :return: The _for of this AlertRulePostBody.  # noqa: E501
        :rtype: str
        """
        return self.__for

    @_for.setter
    def _for(self, _for):
        """Sets the _for of this AlertRulePostBody.

        how long one or more of the expressions in this rule must evaluate as true before an alert is generated  # noqa: E501

        :param _for: The _for of this AlertRulePostBody.  # noqa: E501
        :type: str
        """
        if _for is None:
            raise ValueError("Invalid value for `_for`, must not be `None`")  # noqa: E501

        self.__for = _for

    @property
    def labels(self):
        """Gets the labels of this AlertRulePostBody.  # noqa: E501

        informational properties that classify the alert  # noqa: E501

        :return: The labels of this AlertRulePostBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AlertRulePostBody.

        informational properties that classify the alert  # noqa: E501

        :param labels: The labels of this AlertRulePostBody.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def annotations(self):
        """Gets the annotations of this AlertRulePostBody.  # noqa: E501

        additional informational properties to add to the generated alert  # noqa: E501

        :return: The annotations of this AlertRulePostBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AlertRulePostBody.

        additional informational properties to add to the generated alert  # noqa: E501

        :param annotations: The annotations of this AlertRulePostBody.  # noqa: E501
        :type: dict(str, str)
        """
        if annotations is None:
            raise ValueError("Invalid value for `annotations`, must not be `None`")  # noqa: E501

        self._annotations = annotations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertRulePostBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRulePostBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
