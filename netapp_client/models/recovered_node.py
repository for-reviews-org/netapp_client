# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecoveredNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tempid': 'str',
        'name': 'str',
        'serverip': 'str',
        'oid': 'str',
        'starttime': 'datetime',
        'endtime': 'datetime',
        'state': 'NodeState'
    }

    attribute_map = {
        'id': 'id',
        'tempid': 'tempid',
        'name': 'name',
        'serverip': 'serverip',
        'oid': 'oid',
        'starttime': 'starttime',
        'endtime': 'endtime',
        'state': 'state'
    }

    def __init__(self, id=None, tempid=None, name=None, serverip=None, oid=None, starttime=None, endtime=None, state=None):  # noqa: E501
        """RecoveredNode - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._tempid = None
        self._name = None
        self._serverip = None
        self._oid = None
        self._starttime = None
        self._endtime = None
        self._state = None
        self.discriminator = None
        self.id = id
        self.tempid = tempid
        self.name = name
        self.serverip = serverip
        self.oid = oid
        self.starttime = starttime
        self.endtime = endtime
        self.state = state

    @property
    def id(self):
        """Gets the id of this RecoveredNode.  # noqa: E501

        a unique identifier for the historical recovery (automatically assigned when the node is recovered)  # noqa: E501

        :return: The id of this RecoveredNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecoveredNode.

        a unique identifier for the historical recovery (automatically assigned when the node is recovered)  # noqa: E501

        :param id: The id of this RecoveredNode.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tempid(self):
        """Gets the tempid of this RecoveredNode.  # noqa: E501

        the target node's UUID  # noqa: E501

        :return: The tempid of this RecoveredNode.  # noqa: E501
        :rtype: str
        """
        return self._tempid

    @tempid.setter
    def tempid(self, tempid):
        """Sets the tempid of this RecoveredNode.

        the target node's UUID  # noqa: E501

        :param tempid: The tempid of this RecoveredNode.  # noqa: E501
        :type: str
        """
        if tempid is None:
            raise ValueError("Invalid value for `tempid`, must not be `None`")  # noqa: E501

        self._tempid = tempid

    @property
    def name(self):
        """Gets the name of this RecoveredNode.  # noqa: E501

        the name of the node (must be a valid hostname)  # noqa: E501

        :return: The name of this RecoveredNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecoveredNode.

        the name of the node (must be a valid hostname)  # noqa: E501

        :param name: The name of this RecoveredNode.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def serverip(self):
        """Gets the serverip of this RecoveredNode.  # noqa: E501

        the grid network ip address for the node  # noqa: E501

        :return: The serverip of this RecoveredNode.  # noqa: E501
        :rtype: str
        """
        return self._serverip

    @serverip.setter
    def serverip(self, serverip):
        """Sets the serverip of this RecoveredNode.

        the grid network ip address for the node  # noqa: E501

        :param serverip: The serverip of this RecoveredNode.  # noqa: E501
        :type: str
        """
        if serverip is None:
            raise ValueError("Invalid value for `serverip`, must not be `None`")  # noqa: E501

        self._serverip = serverip

    @property
    def oid(self):
        """Gets the oid of this RecoveredNode.  # noqa: E501

        OID of a grid node  # noqa: E501

        :return: The oid of this RecoveredNode.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this RecoveredNode.

        OID of a grid node  # noqa: E501

        :param oid: The oid of this RecoveredNode.  # noqa: E501
        :type: str
        """
        if oid is None:
            raise ValueError("Invalid value for `oid`, must not be `None`")  # noqa: E501

        self._oid = oid

    @property
    def starttime(self):
        """Gets the starttime of this RecoveredNode.  # noqa: E501

        the date and time when the recovery procedure was started  # noqa: E501

        :return: The starttime of this RecoveredNode.  # noqa: E501
        :rtype: datetime
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this RecoveredNode.

        the date and time when the recovery procedure was started  # noqa: E501

        :param starttime: The starttime of this RecoveredNode.  # noqa: E501
        :type: datetime
        """
        if starttime is None:
            raise ValueError("Invalid value for `starttime`, must not be `None`")  # noqa: E501

        self._starttime = starttime

    @property
    def endtime(self):
        """Gets the endtime of this RecoveredNode.  # noqa: E501

        the date and time when the recovery procedure completed  # noqa: E501

        :return: The endtime of this RecoveredNode.  # noqa: E501
        :rtype: datetime
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this RecoveredNode.

        the date and time when the recovery procedure completed  # noqa: E501

        :param endtime: The endtime of this RecoveredNode.  # noqa: E501
        :type: datetime
        """
        if endtime is None:
            raise ValueError("Invalid value for `endtime`, must not be `None`")  # noqa: E501

        self._endtime = endtime

    @property
    def state(self):
        """Gets the state of this RecoveredNode.  # noqa: E501


        :return: The state of this RecoveredNode.  # noqa: E501
        :rtype: NodeState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RecoveredNode.


        :param state: The state of this RecoveredNode.  # noqa: E501
        :type: NodeState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecoveredNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveredNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
