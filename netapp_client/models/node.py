# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'site': 'str',
        'name': 'str',
        'ntp_role': 'str',
        'has_adc': 'bool',
        'type': 'str',
        'is_primary_admin': 'bool',
        'configured': 'bool',
        'networks': 'NodeNetworks'
    }

    attribute_map = {
        'id': 'id',
        'site': 'site',
        'name': 'name',
        'ntp_role': 'ntpRole',
        'has_adc': 'hasAdc',
        'type': 'type',
        'is_primary_admin': 'isPrimaryAdmin',
        'configured': 'configured',
        'networks': 'networks'
    }

    def __init__(self, id=None, site=None, name=None, ntp_role=None, has_adc=None, type=None, is_primary_admin=None, configured=None, networks=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._site = None
        self._name = None
        self._ntp_role = None
        self._has_adc = None
        self._type = None
        self._is_primary_admin = None
        self._configured = None
        self._networks = None
        self.discriminator = None
        self.id = id
        self.site = site
        self.name = name
        if ntp_role is not None:
            self.ntp_role = ntp_role
        if has_adc is not None:
            self.has_adc = has_adc
        self.type = type
        if is_primary_admin is not None:
            self.is_primary_admin = is_primary_admin
        self.configured = configured
        self.networks = networks

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501

        a unique identifier for the node (automatically assigned when the node is created)  # noqa: E501

        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        a unique identifier for the node (automatically assigned when the node is created)  # noqa: E501

        :param id: The id of this Node.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def site(self):
        """Gets the site of this Node.  # noqa: E501

        the id of the site to which the node is assigned  # noqa: E501

        :return: The site of this Node.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Node.

        the id of the site to which the node is assigned  # noqa: E501

        :param site: The site of this Node.  # noqa: E501
        :type: str
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")  # noqa: E501

        self._site = site

    @property
    def name(self):
        """Gets the name of this Node.  # noqa: E501

        the name of the node (must be a valid hostname)  # noqa: E501

        :return: The name of this Node.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        the name of the node (must be a valid hostname)  # noqa: E501

        :param name: The name of this Node.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ntp_role(self):
        """Gets the ntp_role of this Node.  # noqa: E501

        the NTP role assigned to the node, or null to determine automatically  # noqa: E501

        :return: The ntp_role of this Node.  # noqa: E501
        :rtype: str
        """
        return self._ntp_role

    @ntp_role.setter
    def ntp_role(self, ntp_role):
        """Sets the ntp_role of this Node.

        the NTP role assigned to the node, or null to determine automatically  # noqa: E501

        :param ntp_role: The ntp_role of this Node.  # noqa: E501
        :type: str
        """
        allowed_values = ["primary", "client"]  # noqa: E501
        if ntp_role not in allowed_values:
            raise ValueError(
                "Invalid value for `ntp_role` ({0}), must be one of {1}"  # noqa: E501
                .format(ntp_role, allowed_values)
            )

        self._ntp_role = ntp_role

    @property
    def has_adc(self):
        """Gets the has_adc of this Node.  # noqa: E501

        whether the grid node has an ADC (Administrative Domain Controller) service, or null to determine automatically; at least three Storage Nodes per site must contain an ADC service   # noqa: E501

        :return: The has_adc of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._has_adc

    @has_adc.setter
    def has_adc(self, has_adc):
        """Sets the has_adc of this Node.

        whether the grid node has an ADC (Administrative Domain Controller) service, or null to determine automatically; at least three Storage Nodes per site must contain an ADC service   # noqa: E501

        :param has_adc: The has_adc of this Node.  # noqa: E501
        :type: bool
        """

        self._has_adc = has_adc

    @property
    def type(self):
        """Gets the type of this Node.  # noqa: E501

        the node type  # noqa: E501

        :return: The type of this Node.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.

        the node type  # noqa: E501

        :param type: The type of this Node.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["adminNode", "apiGatewayNode", "archiveNode", "storageNode"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_primary_admin(self):
        """Gets the is_primary_admin of this Node.  # noqa: E501

        whether this Admin Node is the primary Admin Node, or null if this node is not an Admin Node; immutable   # noqa: E501

        :return: The is_primary_admin of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_admin

    @is_primary_admin.setter
    def is_primary_admin(self, is_primary_admin):
        """Sets the is_primary_admin of this Node.

        whether this Admin Node is the primary Admin Node, or null if this node is not an Admin Node; immutable   # noqa: E501

        :param is_primary_admin: The is_primary_admin of this Node.  # noqa: E501
        :type: bool
        """

        self._is_primary_admin = is_primary_admin

    @property
    def configured(self):
        """Gets the configured of this Node.  # noqa: E501

        whether required properties for this node have been configured and the node has been added to a site   # noqa: E501

        :return: The configured of this Node.  # noqa: E501
        :rtype: bool
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this Node.

        whether required properties for this node have been configured and the node has been added to a site   # noqa: E501

        :param configured: The configured of this Node.  # noqa: E501
        :type: bool
        """
        if configured is None:
            raise ValueError("Invalid value for `configured`, must not be `None`")  # noqa: E501

        self._configured = configured

    @property
    def networks(self):
        """Gets the networks of this Node.  # noqa: E501


        :return: The networks of this Node.  # noqa: E501
        :rtype: NodeNetworks
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Node.


        :param networks: The networks of this Node.  # noqa: E501
        :type: NodeNetworks
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")  # noqa: E501

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
