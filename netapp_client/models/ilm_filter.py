# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IlmFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_operator': 'str',
        'criteria': 'list[Criterion]'
    }

    attribute_map = {
        'logical_operator': 'logicalOperator',
        'criteria': 'criteria'
    }

    def __init__(self, logical_operator=None, criteria=None):  # noqa: E501
        """IlmFilter - a model defined in Swagger"""  # noqa: E501
        self._logical_operator = None
        self._criteria = None
        self.discriminator = None
        if logical_operator is not None:
            self.logical_operator = logical_operator
        if criteria is not None:
            self.criteria = criteria

    @property
    def logical_operator(self):
        """Gets the logical_operator of this IlmFilter.  # noqa: E501

        logical operator connecting filtering criteria when more than one criterion provided  # noqa: E501

        :return: The logical_operator of this IlmFilter.  # noqa: E501
        :rtype: str
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this IlmFilter.

        logical operator connecting filtering criteria when more than one criterion provided  # noqa: E501

        :param logical_operator: The logical_operator of this IlmFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["and"]  # noqa: E501
        if logical_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(logical_operator, allowed_values)
            )

        self._logical_operator = logical_operator

    @property
    def criteria(self):
        """Gets the criteria of this IlmFilter.  # noqa: E501

        a group of logical conditions based on object metadata  # noqa: E501

        :return: The criteria of this IlmFilter.  # noqa: E501
        :rtype: list[Criterion]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this IlmFilter.

        a group of logical conditions based on object metadata  # noqa: E501

        :param criteria: The criteria of this IlmFilter.  # noqa: E501
        :type: list[Criterion]
        """

        self._criteria = criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlmFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlmFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
