# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplianceGlobalForGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compliance_enabled': 'bool',
        'legacy_compliance_enabled': 'bool',
        'create_legacy_compliance_buckets': 'bool'
    }

    attribute_map = {
        'compliance_enabled': 'complianceEnabled',
        'legacy_compliance_enabled': 'legacyComplianceEnabled',
        'create_legacy_compliance_buckets': 'createLegacyComplianceBuckets'
    }

    def __init__(self, compliance_enabled=None, legacy_compliance_enabled=None, create_legacy_compliance_buckets=None):  # noqa: E501
        """ComplianceGlobalForGet - a model defined in Swagger"""  # noqa: E501
        self._compliance_enabled = None
        self._legacy_compliance_enabled = None
        self._create_legacy_compliance_buckets = None
        self.discriminator = None
        self.compliance_enabled = compliance_enabled
        if legacy_compliance_enabled is not None:
            self.legacy_compliance_enabled = legacy_compliance_enabled
        if create_legacy_compliance_buckets is not None:
            self.create_legacy_compliance_buckets = create_legacy_compliance_buckets

    @property
    def compliance_enabled(self):
        """Gets the compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501

        indicates whether S3 Object Lock is enabled for the grid  # noqa: E501

        :return: The compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501
        :rtype: bool
        """
        return self._compliance_enabled

    @compliance_enabled.setter
    def compliance_enabled(self, compliance_enabled):
        """Sets the compliance_enabled of this ComplianceGlobalForGet.

        indicates whether S3 Object Lock is enabled for the grid  # noqa: E501

        :param compliance_enabled: The compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501
        :type: bool
        """
        if compliance_enabled is None:
            raise ValueError("Invalid value for `compliance_enabled`, must not be `None`")  # noqa: E501

        self._compliance_enabled = compliance_enabled

    @property
    def legacy_compliance_enabled(self):
        """Gets the legacy_compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501

        Whether the global Compliance setting was previously enabled. Compliance is a legacy feature that was replaced by S3 Object Lock.  # noqa: E501

        :return: The legacy_compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_compliance_enabled

    @legacy_compliance_enabled.setter
    def legacy_compliance_enabled(self, legacy_compliance_enabled):
        """Sets the legacy_compliance_enabled of this ComplianceGlobalForGet.

        Whether the global Compliance setting was previously enabled. Compliance is a legacy feature that was replaced by S3 Object Lock.  # noqa: E501

        :param legacy_compliance_enabled: The legacy_compliance_enabled of this ComplianceGlobalForGet.  # noqa: E501
        :type: bool
        """

        self._legacy_compliance_enabled = legacy_compliance_enabled

    @property
    def create_legacy_compliance_buckets(self):
        """Gets the create_legacy_compliance_buckets of this ComplianceGlobalForGet.  # noqa: E501

        Whether S3 tenants can create new Compliant buckets. Compliance is a legacy feature that was replaced by S3 Object Lock.  # noqa: E501

        :return: The create_legacy_compliance_buckets of this ComplianceGlobalForGet.  # noqa: E501
        :rtype: bool
        """
        return self._create_legacy_compliance_buckets

    @create_legacy_compliance_buckets.setter
    def create_legacy_compliance_buckets(self, create_legacy_compliance_buckets):
        """Sets the create_legacy_compliance_buckets of this ComplianceGlobalForGet.

        Whether S3 tenants can create new Compliant buckets. Compliance is a legacy feature that was replaced by S3 Object Lock.  # noqa: E501

        :param create_legacy_compliance_buckets: The create_legacy_compliance_buckets of this ComplianceGlobalForGet.  # noqa: E501
        :type: bool
        """

        self._create_legacy_compliance_buckets = create_legacy_compliance_buckets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceGlobalForGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceGlobalForGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
