# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResolvedalertrecordLabels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alertname': 'str',
        'instance': 'str',
        'job': 'str',
        'service': 'str',
        'severity': 'str',
        'node_id': 'str',
        'site_id': 'str',
        'site_name': 'str'
    }

    attribute_map = {
        'alertname': 'alertname',
        'instance': 'instance',
        'job': 'job',
        'service': 'service',
        'severity': 'severity',
        'node_id': 'node_id',
        'site_id': 'site_id',
        'site_name': 'site_name'
    }

    def __init__(self, alertname=None, instance=None, job=None, service=None, severity=None, node_id=None, site_id=None, site_name=None):  # noqa: E501
        """ResolvedalertrecordLabels - a model defined in Swagger"""  # noqa: E501
        self._alertname = None
        self._instance = None
        self._job = None
        self._service = None
        self._severity = None
        self._node_id = None
        self._site_id = None
        self._site_name = None
        self.discriminator = None
        self.alertname = alertname
        if instance is not None:
            self.instance = instance
        self.job = job
        if service is not None:
            self.service = service
        self.severity = severity
        if node_id is not None:
            self.node_id = node_id
        if site_id is not None:
            self.site_id = site_id
        if site_name is not None:
            self.site_name = site_name

    @property
    def alertname(self):
        """Gets the alertname of this ResolvedalertrecordLabels.  # noqa: E501

        The name of the alert  # noqa: E501

        :return: The alertname of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._alertname

    @alertname.setter
    def alertname(self, alertname):
        """Sets the alertname of this ResolvedalertrecordLabels.

        The name of the alert  # noqa: E501

        :param alertname: The alertname of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """
        if alertname is None:
            raise ValueError("Invalid value for `alertname`, must not be `None`")  # noqa: E501

        self._alertname = alertname

    @property
    def instance(self):
        """Gets the instance of this ResolvedalertrecordLabels.  # noqa: E501

        The grid node where this alert is occurring  # noqa: E501

        :return: The instance of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ResolvedalertrecordLabels.

        The grid node where this alert is occurring  # noqa: E501

        :param instance: The instance of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def job(self):
        """Gets the job of this ResolvedalertrecordLabels.  # noqa: E501

        The category of the alert  # noqa: E501

        :return: The job of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this ResolvedalertrecordLabels.

        The category of the alert  # noqa: E501

        :param job: The job of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """
        if job is None:
            raise ValueError("Invalid value for `job`, must not be `None`")  # noqa: E501

        self._job = job

    @property
    def service(self):
        """Gets the service of this ResolvedalertrecordLabels.  # noqa: E501

        The StorageGRID service associated with the alert  # noqa: E501

        :return: The service of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ResolvedalertrecordLabels.

        The StorageGRID service associated with the alert  # noqa: E501

        :param service: The service of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def severity(self):
        """Gets the severity of this ResolvedalertrecordLabels.  # noqa: E501

        The severity level of the alert  # noqa: E501

        :return: The severity of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ResolvedalertrecordLabels.

        The severity level of the alert  # noqa: E501

        :param severity: The severity of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["critical", "major", "minor"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def node_id(self):
        """Gets the node_id of this ResolvedalertrecordLabels.  # noqa: E501

        The id of the node where this alert occurred  # noqa: E501

        :return: The node_id of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ResolvedalertrecordLabels.

        The id of the node where this alert occurred  # noqa: E501

        :param node_id: The node_id of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def site_id(self):
        """Gets the site_id of this ResolvedalertrecordLabels.  # noqa: E501

        The id of the site where this alert occurred  # noqa: E501

        :return: The site_id of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ResolvedalertrecordLabels.

        The id of the site where this alert occurred  # noqa: E501

        :param site_id: The site_id of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this ResolvedalertrecordLabels.  # noqa: E501

        The name of the site where this alert occurred  # noqa: E501

        :return: The site_name of this ResolvedalertrecordLabels.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this ResolvedalertrecordLabels.

        The name of the site where this alert occurred  # noqa: E501

        :param site_name: The site_name of this ResolvedalertrecordLabels.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResolvedalertrecordLabels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolvedalertrecordLabels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
