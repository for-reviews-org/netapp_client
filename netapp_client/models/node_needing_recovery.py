# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeNeedingRecovery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oid': 'str',
        'name': 'str',
        'state': 'NodeState',
        'ip': 'str',
        'replacement_node': 'RecoveryNode'
    }

    attribute_map = {
        'oid': 'oid',
        'name': 'name',
        'state': 'state',
        'ip': 'ip',
        'replacement_node': 'replacementNode'
    }

    def __init__(self, oid=None, name=None, state=None, ip=None, replacement_node=None):  # noqa: E501
        """NodeNeedingRecovery - a model defined in Swagger"""  # noqa: E501
        self._oid = None
        self._name = None
        self._state = None
        self._ip = None
        self._replacement_node = None
        self.discriminator = None
        self.oid = oid
        self.name = name
        self.state = state
        self.ip = ip
        if replacement_node is not None:
            self.replacement_node = replacement_node

    @property
    def oid(self):
        """Gets the oid of this NodeNeedingRecovery.  # noqa: E501

        OID of a grid node  # noqa: E501

        :return: The oid of this NodeNeedingRecovery.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this NodeNeedingRecovery.

        OID of a grid node  # noqa: E501

        :param oid: The oid of this NodeNeedingRecovery.  # noqa: E501
        :type: str
        """
        if oid is None:
            raise ValueError("Invalid value for `oid`, must not be `None`")  # noqa: E501

        self._oid = oid

    @property
    def name(self):
        """Gets the name of this NodeNeedingRecovery.  # noqa: E501

        display name or hostname of a grid node  # noqa: E501

        :return: The name of this NodeNeedingRecovery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeNeedingRecovery.

        display name or hostname of a grid node  # noqa: E501

        :param name: The name of this NodeNeedingRecovery.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def state(self):
        """Gets the state of this NodeNeedingRecovery.  # noqa: E501


        :return: The state of this NodeNeedingRecovery.  # noqa: E501
        :rtype: NodeState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeNeedingRecovery.


        :param state: The state of this NodeNeedingRecovery.  # noqa: E501
        :type: NodeState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def ip(self):
        """Gets the ip of this NodeNeedingRecovery.  # noqa: E501

        node's grid network ip address  # noqa: E501

        :return: The ip of this NodeNeedingRecovery.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this NodeNeedingRecovery.

        node's grid network ip address  # noqa: E501

        :param ip: The ip of this NodeNeedingRecovery.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def replacement_node(self):
        """Gets the replacement_node of this NodeNeedingRecovery.  # noqa: E501


        :return: The replacement_node of this NodeNeedingRecovery.  # noqa: E501
        :rtype: RecoveryNode
        """
        return self._replacement_node

    @replacement_node.setter
    def replacement_node(self, replacement_node):
        """Sets the replacement_node of this NodeNeedingRecovery.


        :param replacement_node: The replacement_node of this NodeNeedingRecovery.  # noqa: E501
        :type: RecoveryNode
        """

        self._replacement_node = replacement_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeNeedingRecovery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeNeedingRecovery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
