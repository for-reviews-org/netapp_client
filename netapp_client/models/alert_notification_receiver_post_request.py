# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertNotificationReceiverPostRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'enable': 'bool',
        'smtp_host': 'str',
        'smtp_port': 'int',
        'username': 'str',
        'password': 'str',
        'from_email': 'str',
        'to_emails': 'list[str]',
        'minimum_severity': 'str',
        'ca_cert': 'str',
        'client_cert': 'str',
        'client_key': 'str'
    }

    attribute_map = {
        'type': 'type',
        'enable': 'enable',
        'smtp_host': 'smtpHost',
        'smtp_port': 'smtpPort',
        'username': 'username',
        'password': 'password',
        'from_email': 'fromEmail',
        'to_emails': 'toEmails',
        'minimum_severity': 'minimumSeverity',
        'ca_cert': 'caCert',
        'client_cert': 'clientCert',
        'client_key': 'clientKey'
    }

    def __init__(self, type=None, enable=True, smtp_host=None, smtp_port=None, username=None, password=None, from_email=None, to_emails=None, minimum_severity=None, ca_cert=None, client_cert=None, client_key=None):  # noqa: E501
        """AlertNotificationReceiverPostRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._enable = None
        self._smtp_host = None
        self._smtp_port = None
        self._username = None
        self._password = None
        self._from_email = None
        self._to_emails = None
        self._minimum_severity = None
        self._ca_cert = None
        self._client_cert = None
        self._client_key = None
        self.discriminator = None
        self.type = type
        self.enable = enable
        self.smtp_host = smtp_host
        self.smtp_port = smtp_port
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        self.from_email = from_email
        self.to_emails = to_emails
        self.minimum_severity = minimum_severity
        if ca_cert is not None:
            self.ca_cert = ca_cert
        if client_cert is not None:
            self.client_cert = client_cert
        if client_key is not None:
            self.client_key = client_key

    @property
    def type(self):
        """Gets the type of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the type of notification receiver  # noqa: E501

        :return: The type of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertNotificationReceiverPostRequest.

        the type of notification receiver  # noqa: E501

        :param type: The type of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["email"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def enable(self):
        """Gets the enable of this AlertNotificationReceiverPostRequest.  # noqa: E501

        whether alert notifications are sent to this receiver  # noqa: E501

        :return: The enable of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AlertNotificationReceiverPostRequest.

        whether alert notifications are sent to this receiver  # noqa: E501

        :param enable: The enable of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def smtp_host(self):
        """Gets the smtp_host of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the IP address or hostname of the SMTP server  # noqa: E501

        :return: The smtp_host of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._smtp_host

    @smtp_host.setter
    def smtp_host(self, smtp_host):
        """Sets the smtp_host of this AlertNotificationReceiverPostRequest.

        the IP address or hostname of the SMTP server  # noqa: E501

        :param smtp_host: The smtp_host of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """
        if smtp_host is None:
            raise ValueError("Invalid value for `smtp_host`, must not be `None`")  # noqa: E501

        self._smtp_host = smtp_host

    @property
    def smtp_port(self):
        """Gets the smtp_port of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the port to use to communicate with the SMTP server  # noqa: E501

        :return: The smtp_port of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this AlertNotificationReceiverPostRequest.

        the port to use to communicate with the SMTP server  # noqa: E501

        :param smtp_port: The smtp_port of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: int
        """
        if smtp_port is None:
            raise ValueError("Invalid value for `smtp_port`, must not be `None`")  # noqa: E501

        self._smtp_port = smtp_port

    @property
    def username(self):
        """Gets the username of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the username to use to authenticate with the SMTP server  # noqa: E501

        :return: The username of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AlertNotificationReceiverPostRequest.

        the username to use to authenticate with the SMTP server  # noqa: E501

        :param username: The username of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the password to use to authenticate with the SMTP server. Obfuscated in responses.  # noqa: E501

        :return: The password of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AlertNotificationReceiverPostRequest.

        the password to use to authenticate with the SMTP server. Obfuscated in responses.  # noqa: E501

        :param password: The password of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def from_email(self):
        """Gets the from_email of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the email address that will appear in the From field of alert notification emails  # noqa: E501

        :return: The from_email of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._from_email

    @from_email.setter
    def from_email(self, from_email):
        """Sets the from_email of this AlertNotificationReceiverPostRequest.

        the email address that will appear in the From field of alert notification emails  # noqa: E501

        :param from_email: The from_email of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """
        if from_email is None:
            raise ValueError("Invalid value for `from_email`, must not be `None`")  # noqa: E501

        self._from_email = from_email

    @property
    def to_emails(self):
        """Gets the to_emails of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the email addresses to send alert notifications to  # noqa: E501

        :return: The to_emails of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._to_emails

    @to_emails.setter
    def to_emails(self, to_emails):
        """Sets the to_emails of this AlertNotificationReceiverPostRequest.

        the email addresses to send alert notifications to  # noqa: E501

        :param to_emails: The to_emails of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: list[str]
        """
        if to_emails is None:
            raise ValueError("Invalid value for `to_emails`, must not be `None`")  # noqa: E501

        self._to_emails = to_emails

    @property
    def minimum_severity(self):
        """Gets the minimum_severity of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the minimum severity level for alert notifications. For example, \"major\" will not send notifications for minor alerts, but will send notifications for major or critical alerts.  # noqa: E501

        :return: The minimum_severity of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._minimum_severity

    @minimum_severity.setter
    def minimum_severity(self, minimum_severity):
        """Sets the minimum_severity of this AlertNotificationReceiverPostRequest.

        the minimum severity level for alert notifications. For example, \"major\" will not send notifications for minor alerts, but will send notifications for major or critical alerts.  # noqa: E501

        :param minimum_severity: The minimum_severity of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """
        if minimum_severity is None:
            raise ValueError("Invalid value for `minimum_severity`, must not be `None`")  # noqa: E501
        allowed_values = ["minor", "major", "critical"]  # noqa: E501
        if minimum_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(minimum_severity, allowed_values)
            )

        self._minimum_severity = minimum_severity

    @property
    def ca_cert(self):
        """Gets the ca_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501

        if TLS is required, the CA certificate that will be used to verify the identity of the SMTP server  # noqa: E501

        :return: The ca_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this AlertNotificationReceiverPostRequest.

        if TLS is required, the CA certificate that will be used to verify the identity of the SMTP server  # noqa: E501

        :param ca_cert: The ca_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """

        self._ca_cert = ca_cert

    @property
    def client_cert(self):
        """Gets the client_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501

        if a client certificate is required to verify the identity of the Admin Node, the PEM-encoded certificate to send to the SMTP server. A CA certificate must also be provided  # noqa: E501

        :return: The client_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_cert

    @client_cert.setter
    def client_cert(self, client_cert):
        """Sets the client_cert of this AlertNotificationReceiverPostRequest.

        if a client certificate is required to verify the identity of the Admin Node, the PEM-encoded certificate to send to the SMTP server. A CA certificate must also be provided  # noqa: E501

        :param client_cert: The client_cert of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """

        self._client_cert = client_cert

    @property
    def client_key(self):
        """Gets the client_key of this AlertNotificationReceiverPostRequest.  # noqa: E501

        the PEM-encoded private key for the client certificate. Obfuscated in responses.  # noqa: E501

        :return: The client_key of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this AlertNotificationReceiverPostRequest.

        the PEM-encoded private key for the client certificate. Obfuscated in responses.  # noqa: E501

        :param client_key: The client_key of this AlertNotificationReceiverPostRequest.  # noqa: E501
        :type: str
        """

        self._client_key = client_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertNotificationReceiverPostRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertNotificationReceiverPostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
