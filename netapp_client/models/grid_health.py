# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarms': 'AlarmCounts',
        'alerts': 'AlertCounts',
        'nodes': 'NodeStateCounts'
    }

    attribute_map = {
        'alarms': 'alarms',
        'alerts': 'alerts',
        'nodes': 'nodes'
    }

    def __init__(self, alarms=None, alerts=None, nodes=None):  # noqa: E501
        """GridHealth - a model defined in Swagger"""  # noqa: E501
        self._alarms = None
        self._alerts = None
        self._nodes = None
        self.discriminator = None
        if alarms is not None:
            self.alarms = alarms
        if alerts is not None:
            self.alerts = alerts
        if nodes is not None:
            self.nodes = nodes

    @property
    def alarms(self):
        """Gets the alarms of this GridHealth.  # noqa: E501


        :return: The alarms of this GridHealth.  # noqa: E501
        :rtype: AlarmCounts
        """
        return self._alarms

    @alarms.setter
    def alarms(self, alarms):
        """Sets the alarms of this GridHealth.


        :param alarms: The alarms of this GridHealth.  # noqa: E501
        :type: AlarmCounts
        """

        self._alarms = alarms

    @property
    def alerts(self):
        """Gets the alerts of this GridHealth.  # noqa: E501


        :return: The alerts of this GridHealth.  # noqa: E501
        :rtype: AlertCounts
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this GridHealth.


        :param alerts: The alerts of this GridHealth.  # noqa: E501
        :type: AlertCounts
        """

        self._alerts = alerts

    @property
    def nodes(self):
        """Gets the nodes of this GridHealth.  # noqa: E501


        :return: The nodes of this GridHealth.  # noqa: E501
        :rtype: NodeStateCounts
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GridHealth.


        :param nodes: The nodes of this GridHealth.  # noqa: E501
        :type: NodeStateCounts
        """

        self._nodes = nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
