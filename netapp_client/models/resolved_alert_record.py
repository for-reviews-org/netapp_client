# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResolvedAlertRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'name': 'str',
        'instance': 'str',
        'severity': 'str',
        'event': 'str',
        'labels': 'ResolvedalertrecordLabels',
        'annotations': 'dict(str, str)',
        'inhibited': 'bool',
        'status': 'str',
        'id': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime'
    }

    attribute_map = {
        'event_id': 'eventId',
        'name': 'name',
        'instance': 'instance',
        'severity': 'severity',
        'event': 'event',
        'labels': 'labels',
        'annotations': 'annotations',
        'inhibited': 'inhibited',
        'status': 'status',
        'id': 'id',
        'start_time': 'startTime',
        'end_time': 'endTime'
    }

    def __init__(self, event_id=None, name=None, instance=None, severity=None, event=None, labels=None, annotations=None, inhibited=None, status=None, id=None, start_time=None, end_time=None):  # noqa: E501
        """ResolvedAlertRecord - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._name = None
        self._instance = None
        self._severity = None
        self._event = None
        self._labels = None
        self._annotations = None
        self._inhibited = None
        self._status = None
        self._id = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        self.event_id = event_id
        self.name = name
        if instance is not None:
            self.instance = instance
        self.severity = severity
        self.event = event
        self.labels = labels
        self.annotations = annotations
        self.inhibited = inhibited
        self.status = status
        self.id = id
        self.start_time = start_time
        self.end_time = end_time

    @property
    def event_id(self):
        """Gets the event_id of this ResolvedAlertRecord.  # noqa: E501

        Internal ID of the record  # noqa: E501

        :return: The event_id of this ResolvedAlertRecord.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ResolvedAlertRecord.

        Internal ID of the record  # noqa: E501

        :param event_id: The event_id of this ResolvedAlertRecord.  # noqa: E501
        :type: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def name(self):
        """Gets the name of this ResolvedAlertRecord.  # noqa: E501

        The unique name of the alert rule that triggered the alert  # noqa: E501

        :return: The name of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResolvedAlertRecord.

        The unique name of the alert rule that triggered the alert  # noqa: E501

        :param name: The name of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def instance(self):
        """Gets the instance of this ResolvedAlertRecord.  # noqa: E501

        The grid node on which this alert occurred  # noqa: E501

        :return: The instance of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ResolvedAlertRecord.

        The grid node on which this alert occurred  # noqa: E501

        :param instance: The instance of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def severity(self):
        """Gets the severity of this ResolvedAlertRecord.  # noqa: E501

        The severity level of the alert  # noqa: E501

        :return: The severity of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ResolvedAlertRecord.

        The severity level of the alert  # noqa: E501

        :param severity: The severity of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["critical", "major", "minor"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def event(self):
        """Gets the event of this ResolvedAlertRecord.  # noqa: E501

        The type of the event  # noqa: E501

        :return: The event of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ResolvedAlertRecord.

        The type of the event  # noqa: E501

        :param event: The event of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501
        allowed_values = ["triggered"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def labels(self):
        """Gets the labels of this ResolvedAlertRecord.  # noqa: E501


        :return: The labels of this ResolvedAlertRecord.  # noqa: E501
        :rtype: ResolvedalertrecordLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ResolvedAlertRecord.


        :param labels: The labels of this ResolvedAlertRecord.  # noqa: E501
        :type: ResolvedalertrecordLabels
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def annotations(self):
        """Gets the annotations of this ResolvedAlertRecord.  # noqa: E501

        Additional informational properties about the alert  # noqa: E501

        :return: The annotations of this ResolvedAlertRecord.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ResolvedAlertRecord.

        Additional informational properties about the alert  # noqa: E501

        :param annotations: The annotations of this ResolvedAlertRecord.  # noqa: E501
        :type: dict(str, str)
        """
        if annotations is None:
            raise ValueError("Invalid value for `annotations`, must not be `None`")  # noqa: E501

        self._annotations = annotations

    @property
    def inhibited(self):
        """Gets the inhibited of this ResolvedAlertRecord.  # noqa: E501

        Whether this alert has been suppressed by another alert for its entire lifespan  # noqa: E501

        :return: The inhibited of this ResolvedAlertRecord.  # noqa: E501
        :rtype: bool
        """
        return self._inhibited

    @inhibited.setter
    def inhibited(self, inhibited):
        """Sets the inhibited of this ResolvedAlertRecord.

        Whether this alert has been suppressed by another alert for its entire lifespan  # noqa: E501

        :param inhibited: The inhibited of this ResolvedAlertRecord.  # noqa: E501
        :type: bool
        """
        if inhibited is None:
            raise ValueError("Invalid value for `inhibited`, must not be `None`")  # noqa: E501

        self._inhibited = inhibited

    @property
    def status(self):
        """Gets the status of this ResolvedAlertRecord.  # noqa: E501

        The status of the alert  # noqa: E501

        :return: The status of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResolvedAlertRecord.

        The status of the alert  # noqa: E501

        :param status: The status of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["resolved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id(self):
        """Gets the id of this ResolvedAlertRecord.  # noqa: E501

        The fingerprint of the alert's labels  # noqa: E501

        :return: The id of this ResolvedAlertRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResolvedAlertRecord.

        The fingerprint of the alert's labels  # noqa: E501

        :param id: The id of this ResolvedAlertRecord.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this ResolvedAlertRecord.  # noqa: E501

        The time when the alert was triggered  # noqa: E501

        :return: The start_time of this ResolvedAlertRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ResolvedAlertRecord.

        The time when the alert was triggered  # noqa: E501

        :param start_time: The start_time of this ResolvedAlertRecord.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ResolvedAlertRecord.  # noqa: E501

        The time when the alert was resolved  # noqa: E501

        :return: The end_time of this ResolvedAlertRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ResolvedAlertRecord.

        The time when the alert was resolved  # noqa: E501

        :param end_time: The end_time of this ResolvedAlertRecord.  # noqa: E501
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResolvedAlertRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolvedAlertRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
