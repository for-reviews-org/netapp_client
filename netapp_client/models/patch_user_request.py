# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PatchUserRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_name': 'str',
        'member_of': 'list[str]',
        'disable': 'bool'
    }

    attribute_map = {
        'full_name': 'fullName',
        'member_of': 'memberOf',
        'disable': 'disable'
    }

    def __init__(self, full_name=None, member_of=None, disable=False):  # noqa: E501
        """PatchUserRequest - a model defined in Swagger"""  # noqa: E501
        self._full_name = None
        self._member_of = None
        self._disable = None
        self.discriminator = None
        if full_name is not None:
            self.full_name = full_name
        if member_of is not None:
            self.member_of = member_of
        if disable is not None:
            self.disable = disable

    @property
    def full_name(self):
        """Gets the full_name of this PatchUserRequest.  # noqa: E501

        the human-readable name for the User (required for local Users and imported automatically for federated Users)  # noqa: E501

        :return: The full_name of this PatchUserRequest.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PatchUserRequest.

        the human-readable name for the User (required for local Users and imported automatically for federated Users)  # noqa: E501

        :param full_name: The full_name of this PatchUserRequest.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def member_of(self):
        """Gets the member_of of this PatchUserRequest.  # noqa: E501

        Group memberships for this User (required for local Users and imported automatically for federated Users)  # noqa: E501

        :return: The member_of of this PatchUserRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this PatchUserRequest.

        Group memberships for this User (required for local Users and imported automatically for federated Users)  # noqa: E501

        :param member_of: The member_of of this PatchUserRequest.  # noqa: E501
        :type: list[str]
        """

        self._member_of = member_of

    @property
    def disable(self):
        """Gets the disable of this PatchUserRequest.  # noqa: E501

        if true, the local User cannot sign in (does not apply to federated Users)  # noqa: E501

        :return: The disable of this PatchUserRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this PatchUserRequest.

        if true, the local User cannot sign in (does not apply to federated Users)  # noqa: E501

        :param disable: The disable of this PatchUserRequest.  # noqa: E501
        :type: bool
        """

        self._disable = disable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PatchUserRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchUserRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
