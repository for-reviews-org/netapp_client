# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsmUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'security_level': 'str',
        'auth_protocol': 'str',
        'auth_passphrase': 'str',
        'priv_protocol': 'str',
        'priv_passphrase': 'str',
        'authoritative_engine_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'security_level': 'securityLevel',
        'auth_protocol': 'authProtocol',
        'auth_passphrase': 'authPassphrase',
        'priv_protocol': 'privProtocol',
        'priv_passphrase': 'privPassphrase',
        'authoritative_engine_id': 'authoritativeEngineId'
    }

    def __init__(self, name=None, security_level=None, auth_protocol=None, auth_passphrase=None, priv_protocol=None, priv_passphrase=None, authoritative_engine_id=None):  # noqa: E501
        """UsmUser - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._security_level = None
        self._auth_protocol = None
        self._auth_passphrase = None
        self._priv_protocol = None
        self._priv_passphrase = None
        self._authoritative_engine_id = None
        self.discriminator = None
        self.name = name
        self.security_level = security_level
        self.auth_protocol = auth_protocol
        self.auth_passphrase = auth_passphrase
        if priv_protocol is not None:
            self.priv_protocol = priv_protocol
        if priv_passphrase is not None:
            self.priv_passphrase = priv_passphrase
        if authoritative_engine_id is not None:
            self.authoritative_engine_id = authoritative_engine_id

    @property
    def name(self):
        """Gets the name of this UsmUser.  # noqa: E501

        The user name. Cannot contain whitespace.  # noqa: E501

        :return: The name of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsmUser.

        The user name. Cannot contain whitespace.  # noqa: E501

        :param name: The name of this UsmUser.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def security_level(self):
        """Gets the security_level of this UsmUser.  # noqa: E501

        The level of security  # noqa: E501

        :return: The security_level of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this UsmUser.

        The level of security  # noqa: E501

        :param security_level: The security_level of this UsmUser.  # noqa: E501
        :type: str
        """
        if security_level is None:
            raise ValueError("Invalid value for `security_level`, must not be `None`")  # noqa: E501
        allowed_values = ["authNoPriv", "authPriv"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"  # noqa: E501
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def auth_protocol(self):
        """Gets the auth_protocol of this UsmUser.  # noqa: E501

        The authentication protocol  # noqa: E501

        :return: The auth_protocol of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_protocol

    @auth_protocol.setter
    def auth_protocol(self, auth_protocol):
        """Sets the auth_protocol of this UsmUser.

        The authentication protocol  # noqa: E501

        :param auth_protocol: The auth_protocol of this UsmUser.  # noqa: E501
        :type: str
        """
        if auth_protocol is None:
            raise ValueError("Invalid value for `auth_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SHA"]  # noqa: E501
        if auth_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_protocol, allowed_values)
            )

        self._auth_protocol = auth_protocol

    @property
    def auth_passphrase(self):
        """Gets the auth_passphrase of this UsmUser.  # noqa: E501

        The authentication passphrase. Cannot contain whitespace.  # noqa: E501

        :return: The auth_passphrase of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_passphrase

    @auth_passphrase.setter
    def auth_passphrase(self, auth_passphrase):
        """Sets the auth_passphrase of this UsmUser.

        The authentication passphrase. Cannot contain whitespace.  # noqa: E501

        :param auth_passphrase: The auth_passphrase of this UsmUser.  # noqa: E501
        :type: str
        """
        if auth_passphrase is None:
            raise ValueError("Invalid value for `auth_passphrase`, must not be `None`")  # noqa: E501

        self._auth_passphrase = auth_passphrase

    @property
    def priv_protocol(self):
        """Gets the priv_protocol of this UsmUser.  # noqa: E501

        The privacy protocol  # noqa: E501

        :return: The priv_protocol of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._priv_protocol

    @priv_protocol.setter
    def priv_protocol(self, priv_protocol):
        """Sets the priv_protocol of this UsmUser.

        The privacy protocol  # noqa: E501

        :param priv_protocol: The priv_protocol of this UsmUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["AES"]  # noqa: E501
        if priv_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `priv_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(priv_protocol, allowed_values)
            )

        self._priv_protocol = priv_protocol

    @property
    def priv_passphrase(self):
        """Gets the priv_passphrase of this UsmUser.  # noqa: E501

        The privacy passphrase. Cannot contain whitespace.  # noqa: E501

        :return: The priv_passphrase of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._priv_passphrase

    @priv_passphrase.setter
    def priv_passphrase(self, priv_passphrase):
        """Sets the priv_passphrase of this UsmUser.

        The privacy passphrase. Cannot contain whitespace.  # noqa: E501

        :param priv_passphrase: The priv_passphrase of this UsmUser.  # noqa: E501
        :type: str
        """

        self._priv_passphrase = priv_passphrase

    @property
    def authoritative_engine_id(self):
        """Gets the authoritative_engine_id of this UsmUser.  # noqa: E501

        The engine ID to use for localized key hashing. From 5 to 32 bytes in hex. Only for use on users specified in informsess trap destinations.  # noqa: E501

        :return: The authoritative_engine_id of this UsmUser.  # noqa: E501
        :rtype: str
        """
        return self._authoritative_engine_id

    @authoritative_engine_id.setter
    def authoritative_engine_id(self, authoritative_engine_id):
        """Sets the authoritative_engine_id of this UsmUser.

        The engine ID to use for localized key hashing. From 5 to 32 bytes in hex. Only for use on users specified in informsess trap destinations.  # noqa: E501

        :param authoritative_engine_id: The authoritative_engine_id of this UsmUser.  # noqa: E501
        :type: str
        """

        self._authoritative_engine_id = authoritative_engine_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsmUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsmUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
