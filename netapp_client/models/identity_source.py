# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentitySource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'disable': 'bool',
        'hostname': 'str',
        'port': 'int',
        'username': 'str',
        'password': 'str',
        'base_group_dn': 'str',
        'base_user_dn': 'str',
        'ldap_service_type': 'str',
        'type': 'str',
        'ldap_user_id_attribute': 'str',
        'ldap_user_uuid_attribute': 'str',
        'ldap_group_id_attribute': 'str',
        'ldap_group_uuid_attribute': 'str',
        'disable_tls': 'bool',
        'enable_ldaps': 'bool',
        'ca_cert': 'str'
    }

    attribute_map = {
        'id': 'id',
        'disable': 'disable',
        'hostname': 'hostname',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'base_group_dn': 'baseGroupDn',
        'base_user_dn': 'baseUserDn',
        'ldap_service_type': 'ldapServiceType',
        'type': 'type',
        'ldap_user_id_attribute': 'ldapUserIdAttribute',
        'ldap_user_uuid_attribute': 'ldapUserUUIDAttribute',
        'ldap_group_id_attribute': 'ldapGroupIdAttribute',
        'ldap_group_uuid_attribute': 'ldapGroupUUIDAttribute',
        'disable_tls': 'disableTLS',
        'enable_ldaps': 'enableLDAPS',
        'ca_cert': 'caCert'
    }

    def __init__(self, id=None, disable=True, hostname=None, port=None, username=None, password=None, base_group_dn=None, base_user_dn=None, ldap_service_type=None, type='ldap', ldap_user_id_attribute=None, ldap_user_uuid_attribute=None, ldap_group_id_attribute=None, ldap_group_uuid_attribute=None, disable_tls=False, enable_ldaps=False, ca_cert=None):  # noqa: E501
        """IdentitySource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._disable = None
        self._hostname = None
        self._port = None
        self._username = None
        self._password = None
        self._base_group_dn = None
        self._base_user_dn = None
        self._ldap_service_type = None
        self._type = None
        self._ldap_user_id_attribute = None
        self._ldap_user_uuid_attribute = None
        self._ldap_group_id_attribute = None
        self._ldap_group_uuid_attribute = None
        self._disable_tls = None
        self._enable_ldaps = None
        self._ca_cert = None
        self.discriminator = None
        self.id = id
        if disable is not None:
            self.disable = disable
        self.hostname = hostname
        self.port = port
        self.username = username
        self.password = password
        self.base_group_dn = base_group_dn
        self.base_user_dn = base_user_dn
        self.ldap_service_type = ldap_service_type
        if type is not None:
            self.type = type
        if ldap_user_id_attribute is not None:
            self.ldap_user_id_attribute = ldap_user_id_attribute
        if ldap_user_uuid_attribute is not None:
            self.ldap_user_uuid_attribute = ldap_user_uuid_attribute
        if ldap_group_id_attribute is not None:
            self.ldap_group_id_attribute = ldap_group_id_attribute
        if ldap_group_uuid_attribute is not None:
            self.ldap_group_uuid_attribute = ldap_group_uuid_attribute
        if disable_tls is not None:
            self.disable_tls = disable_tls
        if enable_ldaps is not None:
            self.enable_ldaps = enable_ldaps
        if ca_cert is not None:
            self.ca_cert = ca_cert

    @property
    def id(self):
        """Gets the id of this IdentitySource.  # noqa: E501

        a unique identifier for the identity source (automatically assigned when the identity source is configured)  # noqa: E501

        :return: The id of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentitySource.

        a unique identifier for the identity source (automatically assigned when the identity source is configured)  # noqa: E501

        :param id: The id of this IdentitySource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def disable(self):
        """Gets the disable of this IdentitySource.  # noqa: E501

        whether the identity source will be used for authentication  # noqa: E501

        :return: The disable of this IdentitySource.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this IdentitySource.

        whether the identity source will be used for authentication  # noqa: E501

        :param disable: The disable of this IdentitySource.  # noqa: E501
        :type: bool
        """

        self._disable = disable

    @property
    def hostname(self):
        """Gets the hostname of this IdentitySource.  # noqa: E501

        the server hostname or IP address of the identity source  # noqa: E501

        :return: The hostname of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this IdentitySource.

        the server hostname or IP address of the identity source  # noqa: E501

        :param hostname: The hostname of this IdentitySource.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this IdentitySource.  # noqa: E501

        the port to use to connect to the identity source  # noqa: E501

        :return: The port of this IdentitySource.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IdentitySource.

        the port to use to connect to the identity source  # noqa: E501

        :param port: The port of this IdentitySource.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this IdentitySource.  # noqa: E501

        the username to use to access the identity source  # noqa: E501

        :return: The username of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this IdentitySource.

        the username to use to access the identity source  # noqa: E501

        :param username: The username of this IdentitySource.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this IdentitySource.  # noqa: E501

        the password to use to access the identity source  # noqa: E501

        :return: The password of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IdentitySource.

        the password to use to access the identity source  # noqa: E501

        :param password: The password of this IdentitySource.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def base_group_dn(self):
        """Gets the base_group_dn of this IdentitySource.  # noqa: E501

        the fully qualified Distinguished Name (DN) of an LDAP subtree you want to search for groups  # noqa: E501

        :return: The base_group_dn of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._base_group_dn

    @base_group_dn.setter
    def base_group_dn(self, base_group_dn):
        """Sets the base_group_dn of this IdentitySource.

        the fully qualified Distinguished Name (DN) of an LDAP subtree you want to search for groups  # noqa: E501

        :param base_group_dn: The base_group_dn of this IdentitySource.  # noqa: E501
        :type: str
        """
        if base_group_dn is None:
            raise ValueError("Invalid value for `base_group_dn`, must not be `None`")  # noqa: E501

        self._base_group_dn = base_group_dn

    @property
    def base_user_dn(self):
        """Gets the base_user_dn of this IdentitySource.  # noqa: E501

        the fully qualified Distinguished Name (DN) of an LDAP subtree you want to search for users  # noqa: E501

        :return: The base_user_dn of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._base_user_dn

    @base_user_dn.setter
    def base_user_dn(self, base_user_dn):
        """Sets the base_user_dn of this IdentitySource.

        the fully qualified Distinguished Name (DN) of an LDAP subtree you want to search for users  # noqa: E501

        :param base_user_dn: The base_user_dn of this IdentitySource.  # noqa: E501
        :type: str
        """
        if base_user_dn is None:
            raise ValueError("Invalid value for `base_user_dn`, must not be `None`")  # noqa: E501

        self._base_user_dn = base_user_dn

    @property
    def ldap_service_type(self):
        """Gets the ldap_service_type of this IdentitySource.  # noqa: E501

        type of the LDAP service  # noqa: E501

        :return: The ldap_service_type of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ldap_service_type

    @ldap_service_type.setter
    def ldap_service_type(self, ldap_service_type):
        """Sets the ldap_service_type of this IdentitySource.

        type of the LDAP service  # noqa: E501

        :param ldap_service_type: The ldap_service_type of this IdentitySource.  # noqa: E501
        :type: str
        """
        if ldap_service_type is None:
            raise ValueError("Invalid value for `ldap_service_type`, must not be `None`")  # noqa: E501
        allowed_values = ["OpenLDAP", "Active Directory", "Other"]  # noqa: E501
        if ldap_service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ldap_service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ldap_service_type, allowed_values)
            )

        self._ldap_service_type = ldap_service_type

    @property
    def type(self):
        """Gets the type of this IdentitySource.  # noqa: E501

        type of the identity source  # noqa: E501

        :return: The type of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentitySource.

        type of the identity source  # noqa: E501

        :param type: The type of this IdentitySource.  # noqa: E501
        :type: str
        """
        allowed_values = ["ldap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ldap_user_id_attribute(self):
        """Gets the ldap_user_id_attribute of this IdentitySource.  # noqa: E501

        LDAP attribute that identifies the LDAP user who attempts authentication with unique name/login (only required when ldapServiceType is \"Other\")  # noqa: E501

        :return: The ldap_user_id_attribute of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_id_attribute

    @ldap_user_id_attribute.setter
    def ldap_user_id_attribute(self, ldap_user_id_attribute):
        """Sets the ldap_user_id_attribute of this IdentitySource.

        LDAP attribute that identifies the LDAP user who attempts authentication with unique name/login (only required when ldapServiceType is \"Other\")  # noqa: E501

        :param ldap_user_id_attribute: The ldap_user_id_attribute of this IdentitySource.  # noqa: E501
        :type: str
        """

        self._ldap_user_id_attribute = ldap_user_id_attribute

    @property
    def ldap_user_uuid_attribute(self):
        """Gets the ldap_user_uuid_attribute of this IdentitySource.  # noqa: E501

        LDAP attribute that identifies the LDAP user's permanent unique identity (only required when ldapServiceType is \"Other\")  # noqa: E501

        :return: The ldap_user_uuid_attribute of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_uuid_attribute

    @ldap_user_uuid_attribute.setter
    def ldap_user_uuid_attribute(self, ldap_user_uuid_attribute):
        """Sets the ldap_user_uuid_attribute of this IdentitySource.

        LDAP attribute that identifies the LDAP user's permanent unique identity (only required when ldapServiceType is \"Other\")  # noqa: E501

        :param ldap_user_uuid_attribute: The ldap_user_uuid_attribute of this IdentitySource.  # noqa: E501
        :type: str
        """

        self._ldap_user_uuid_attribute = ldap_user_uuid_attribute

    @property
    def ldap_group_id_attribute(self):
        """Gets the ldap_group_id_attribute of this IdentitySource.  # noqa: E501

        LDAP attribute that identifies the LDAP group of the user who attempts authentication (only required when ldapServiceType is \"Other\")  # noqa: E501

        :return: The ldap_group_id_attribute of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_id_attribute

    @ldap_group_id_attribute.setter
    def ldap_group_id_attribute(self, ldap_group_id_attribute):
        """Sets the ldap_group_id_attribute of this IdentitySource.

        LDAP attribute that identifies the LDAP group of the user who attempts authentication (only required when ldapServiceType is \"Other\")  # noqa: E501

        :param ldap_group_id_attribute: The ldap_group_id_attribute of this IdentitySource.  # noqa: E501
        :type: str
        """

        self._ldap_group_id_attribute = ldap_group_id_attribute

    @property
    def ldap_group_uuid_attribute(self):
        """Gets the ldap_group_uuid_attribute of this IdentitySource.  # noqa: E501

        LDAP attribute that identifies the LDAP group's permanent unique identity (only required when ldapServiceType is \"Other\")  # noqa: E501

        :return: The ldap_group_uuid_attribute of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_uuid_attribute

    @ldap_group_uuid_attribute.setter
    def ldap_group_uuid_attribute(self, ldap_group_uuid_attribute):
        """Sets the ldap_group_uuid_attribute of this IdentitySource.

        LDAP attribute that identifies the LDAP group's permanent unique identity (only required when ldapServiceType is \"Other\")  # noqa: E501

        :param ldap_group_uuid_attribute: The ldap_group_uuid_attribute of this IdentitySource.  # noqa: E501
        :type: str
        """

        self._ldap_group_uuid_attribute = ldap_group_uuid_attribute

    @property
    def disable_tls(self):
        """Gets the disable_tls of this IdentitySource.  # noqa: E501

        whether Transport Layer Security (TLS) is used to connect to the identity source server  # noqa: E501

        :return: The disable_tls of this IdentitySource.  # noqa: E501
        :rtype: bool
        """
        return self._disable_tls

    @disable_tls.setter
    def disable_tls(self, disable_tls):
        """Sets the disable_tls of this IdentitySource.

        whether Transport Layer Security (TLS) is used to connect to the identity source server  # noqa: E501

        :param disable_tls: The disable_tls of this IdentitySource.  # noqa: E501
        :type: bool
        """

        self._disable_tls = disable_tls

    @property
    def enable_ldaps(self):
        """Gets the enable_ldaps of this IdentitySource.  # noqa: E501

        whether to use LDAPS instead of STARTTLS to connect to the identity source server. STARTTLS is the default and is recommended.  # noqa: E501

        :return: The enable_ldaps of this IdentitySource.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ldaps

    @enable_ldaps.setter
    def enable_ldaps(self, enable_ldaps):
        """Sets the enable_ldaps of this IdentitySource.

        whether to use LDAPS instead of STARTTLS to connect to the identity source server. STARTTLS is the default and is recommended.  # noqa: E501

        :param enable_ldaps: The enable_ldaps of this IdentitySource.  # noqa: E501
        :type: bool
        """

        self._enable_ldaps = enable_ldaps

    @property
    def ca_cert(self):
        """Gets the ca_cert of this IdentitySource.  # noqa: E501

        custom certificate to use to connect to the identity source server (if no custom certificate is supplied and TLS is enabled, the Operating System CA certificate will be used)  # noqa: E501

        :return: The ca_cert of this IdentitySource.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this IdentitySource.

        custom certificate to use to connect to the identity source server (if no custom certificate is supplied and TLS is enabled, the Operating System CA certificate will be used)  # noqa: E501

        :param ca_cert: The ca_cert of this IdentitySource.  # noqa: E501
        :type: str
        """

        self._ca_cert = ca_cert

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentitySource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentitySource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
