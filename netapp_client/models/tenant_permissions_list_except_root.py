# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TenantPermissionsListExceptRoot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manage_all_containers': 'bool',
        'manage_endpoints': 'bool',
        'manage_own_s3_credentials': 'bool'
    }

    attribute_map = {
        'manage_all_containers': 'manageAllContainers',
        'manage_endpoints': 'manageEndpoints',
        'manage_own_s3_credentials': 'manageOwnS3Credentials'
    }

    def __init__(self, manage_all_containers=None, manage_endpoints=None, manage_own_s3_credentials=None):  # noqa: E501
        """TenantPermissionsListExceptRoot - a model defined in Swagger"""  # noqa: E501
        self._manage_all_containers = None
        self._manage_endpoints = None
        self._manage_own_s3_credentials = None
        self.discriminator = None
        if manage_all_containers is not None:
            self.manage_all_containers = manage_all_containers
        if manage_endpoints is not None:
            self.manage_endpoints = manage_endpoints
        if manage_own_s3_credentials is not None:
            self.manage_own_s3_credentials = manage_own_s3_credentials

    @property
    def manage_all_containers(self):
        """Gets the manage_all_containers of this TenantPermissionsListExceptRoot.  # noqa: E501

        ability to manage all S3 buckets or Swift containers for this tenant account (overrides permission settings in group or bucket policies)  # noqa: E501

        :return: The manage_all_containers of this TenantPermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._manage_all_containers

    @manage_all_containers.setter
    def manage_all_containers(self, manage_all_containers):
        """Sets the manage_all_containers of this TenantPermissionsListExceptRoot.

        ability to manage all S3 buckets or Swift containers for this tenant account (overrides permission settings in group or bucket policies)  # noqa: E501

        :param manage_all_containers: The manage_all_containers of this TenantPermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._manage_all_containers = manage_all_containers

    @property
    def manage_endpoints(self):
        """Gets the manage_endpoints of this TenantPermissionsListExceptRoot.  # noqa: E501

        ability to manage all S3 endpoints for this tenant account  # noqa: E501

        :return: The manage_endpoints of this TenantPermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._manage_endpoints

    @manage_endpoints.setter
    def manage_endpoints(self, manage_endpoints):
        """Sets the manage_endpoints of this TenantPermissionsListExceptRoot.

        ability to manage all S3 endpoints for this tenant account  # noqa: E501

        :param manage_endpoints: The manage_endpoints of this TenantPermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._manage_endpoints = manage_endpoints

    @property
    def manage_own_s3_credentials(self):
        """Gets the manage_own_s3_credentials of this TenantPermissionsListExceptRoot.  # noqa: E501

        ability to manage your personal S3 credentials  # noqa: E501

        :return: The manage_own_s3_credentials of this TenantPermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._manage_own_s3_credentials

    @manage_own_s3_credentials.setter
    def manage_own_s3_credentials(self, manage_own_s3_credentials):
        """Sets the manage_own_s3_credentials of this TenantPermissionsListExceptRoot.

        ability to manage your personal S3 credentials  # noqa: E501

        :param manage_own_s3_credentials: The manage_own_s3_credentials of this TenantPermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._manage_own_s3_credentials = manage_own_s3_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantPermissionsListExceptRoot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantPermissionsListExceptRoot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
