# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecoveryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'in_progress': 'bool',
        'start_time': 'datetime',
        'user': 'InitiatingUser1',
        'node_in_recovery': 'RecoveryNode',
        'recovered_nodes': 'list[RecoveredNode]'
    }

    attribute_map = {
        'id': 'id',
        'in_progress': 'inProgress',
        'start_time': 'startTime',
        'user': 'user',
        'node_in_recovery': 'nodeInRecovery',
        'recovered_nodes': 'recoveredNodes'
    }

    def __init__(self, id=None, in_progress=None, start_time=None, user=None, node_in_recovery=None, recovered_nodes=None):  # noqa: E501
        """RecoveryStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._in_progress = None
        self._start_time = None
        self._user = None
        self._node_in_recovery = None
        self._recovered_nodes = None
        self.discriminator = None
        self.id = id
        self.in_progress = in_progress
        if start_time is not None:
            self.start_time = start_time
        if user is not None:
            self.user = user
        if node_in_recovery is not None:
            self.node_in_recovery = node_in_recovery
        if recovered_nodes is not None:
            self.recovered_nodes = recovered_nodes

    @property
    def id(self):
        """Gets the id of this RecoveryStatus.  # noqa: E501

        the name of the maintenance procedure  # noqa: E501

        :return: The id of this RecoveryStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecoveryStatus.

        the name of the maintenance procedure  # noqa: E501

        :param id: The id of this RecoveryStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        allowed_values = ["recovery"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"  # noqa: E501
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def in_progress(self):
        """Gets the in_progress of this RecoveryStatus.  # noqa: E501

        true if an recovery procedure is currently running  # noqa: E501

        :return: The in_progress of this RecoveryStatus.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this RecoveryStatus.

        true if an recovery procedure is currently running  # noqa: E501

        :param in_progress: The in_progress of this RecoveryStatus.  # noqa: E501
        :type: bool
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def start_time(self):
        """Gets the start_time of this RecoveryStatus.  # noqa: E501

        the date and time when the recovery procedure was started  # noqa: E501

        :return: The start_time of this RecoveryStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RecoveryStatus.

        the date and time when the recovery procedure was started  # noqa: E501

        :param start_time: The start_time of this RecoveryStatus.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def user(self):
        """Gets the user of this RecoveryStatus.  # noqa: E501


        :return: The user of this RecoveryStatus.  # noqa: E501
        :rtype: InitiatingUser1
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RecoveryStatus.


        :param user: The user of this RecoveryStatus.  # noqa: E501
        :type: InitiatingUser1
        """

        self._user = user

    @property
    def node_in_recovery(self):
        """Gets the node_in_recovery of this RecoveryStatus.  # noqa: E501


        :return: The node_in_recovery of this RecoveryStatus.  # noqa: E501
        :rtype: RecoveryNode
        """
        return self._node_in_recovery

    @node_in_recovery.setter
    def node_in_recovery(self, node_in_recovery):
        """Sets the node_in_recovery of this RecoveryStatus.


        :param node_in_recovery: The node_in_recovery of this RecoveryStatus.  # noqa: E501
        :type: RecoveryNode
        """

        self._node_in_recovery = node_in_recovery

    @property
    def recovered_nodes(self):
        """Gets the recovered_nodes of this RecoveryStatus.  # noqa: E501

        list of all grid nodes that have been recovered  # noqa: E501

        :return: The recovered_nodes of this RecoveryStatus.  # noqa: E501
        :rtype: list[RecoveredNode]
        """
        return self._recovered_nodes

    @recovered_nodes.setter
    def recovered_nodes(self, recovered_nodes):
        """Sets the recovered_nodes of this RecoveryStatus.

        list of all grid nodes that have been recovered  # noqa: E501

        :param recovered_nodes: The recovered_nodes of this RecoveryStatus.  # noqa: E501
        :type: list[RecoveredNode]
        """

        self._recovered_nodes = recovered_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecoveryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecoveryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
