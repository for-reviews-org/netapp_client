# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvisioningStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_progress': 'bool',
        'locked': 'bool',
        'complete': 'bool',
        'error': 'str'
    }

    attribute_map = {
        'in_progress': 'inProgress',
        'locked': 'locked',
        'complete': 'complete',
        'error': 'error'
    }

    def __init__(self, in_progress=None, locked=None, complete=None, error=None):  # noqa: E501
        """ProvisioningStatus - a model defined in Swagger"""  # noqa: E501
        self._in_progress = None
        self._locked = None
        self._complete = None
        self._error = None
        self.discriminator = None
        self.in_progress = in_progress
        if locked is not None:
            self.locked = locked
        if complete is not None:
            self.complete = complete
        if error is not None:
            self.error = error

    @property
    def in_progress(self):
        """Gets the in_progress of this ProvisioningStatus.  # noqa: E501

        whether the provisioning operation is in progress  # noqa: E501

        :return: The in_progress of this ProvisioningStatus.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ProvisioningStatus.

        whether the provisioning operation is in progress  # noqa: E501

        :param in_progress: The in_progress of this ProvisioningStatus.  # noqa: E501
        :type: bool
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def locked(self):
        """Gets the locked of this ProvisioningStatus.  # noqa: E501

        whether a new grid revision has been created and modification or cancellation is no longer permitted   # noqa: E501

        :return: The locked of this ProvisioningStatus.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ProvisioningStatus.

        whether a new grid revision has been created and modification or cancellation is no longer permitted   # noqa: E501

        :param locked: The locked of this ProvisioningStatus.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def complete(self):
        """Gets the complete of this ProvisioningStatus.  # noqa: E501

        whether the provisioning operation is complete  # noqa: E501

        :return: The complete of this ProvisioningStatus.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this ProvisioningStatus.

        whether the provisioning operation is complete  # noqa: E501

        :param complete: The complete of this ProvisioningStatus.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def error(self):
        """Gets the error of this ProvisioningStatus.  # noqa: E501

        an error message if a problem occurs during grid provisioning  # noqa: E501

        :return: The error of this ProvisioningStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProvisioningStatus.

        an error message if a problem occurs during grid provisioning  # noqa: E501

        :param error: The error of this ProvisioningStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
