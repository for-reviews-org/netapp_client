# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netapp_client.models.response import Response  # noqa: F401,E501

class GetLicenseResponse(Response):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'Licensedetails',
        'read_only': 'bool',
        'alerts': 'list[LicenseAlert]'
    }
    if hasattr(Response, "swagger_types"):
        swagger_types.update(Response.swagger_types)

    attribute_map = {
        'data': 'data',
        'read_only': 'readOnly',
        'alerts': 'alerts'
    }
    if hasattr(Response, "attribute_map"):
        attribute_map.update(Response.attribute_map)

    def __init__(self, data=None, read_only=None, alerts=None, *args, **kwargs):  # noqa: E501
        """GetLicenseResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._read_only = None
        self._alerts = None
        self.discriminator = None
        self.data = data
        if read_only is not None:
            self.read_only = read_only
        if alerts is not None:
            self.alerts = alerts
        Response.__init__(self, *args, **kwargs)

    @property
    def data(self):
        """Gets the data of this GetLicenseResponse.  # noqa: E501


        :return: The data of this GetLicenseResponse.  # noqa: E501
        :rtype: Licensedetails
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetLicenseResponse.


        :param data: The data of this GetLicenseResponse.  # noqa: E501
        :type: Licensedetails
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def read_only(self):
        """Gets the read_only of this GetLicenseResponse.  # noqa: E501

        true if a grid license update is in progress  # noqa: E501

        :return: The read_only of this GetLicenseResponse.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this GetLicenseResponse.

        true if a grid license update is in progress  # noqa: E501

        :param read_only: The read_only of this GetLicenseResponse.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def alerts(self):
        """Gets the alerts of this GetLicenseResponse.  # noqa: E501

        any alerts such as when a grid license update is in progress or error from the last update attempt  # noqa: E501

        :return: The alerts of this GetLicenseResponse.  # noqa: E501
        :rtype: list[LicenseAlert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this GetLicenseResponse.

        any alerts such as when a grid license update is in progress or error from the last update attempt  # noqa: E501

        :param alerts: The alerts of this GetLicenseResponse.  # noqa: E501
        :type: list[LicenseAlert]
        """

        self._alerts = alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetLicenseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLicenseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
