# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.post_user_request import PostUserRequest  # noqa: F401,E501

class User(PostUserRequest):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'id': 'str',
        'federated': 'bool',
        'user_urn': 'str'
    }
    if hasattr(PostUserRequest, "swagger_types"):
        swagger_types.update(PostUserRequest.swagger_types)

    attribute_map = {
        'account_id': 'accountId',
        'id': 'id',
        'federated': 'federated',
        'user_urn': 'userURN'
    }
    if hasattr(PostUserRequest, "attribute_map"):
        attribute_map.update(PostUserRequest.attribute_map)

    def __init__(self, account_id=None, id=None, federated=None, user_urn=None, *args, **kwargs):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._id = None
        self._federated = None
        self._user_urn = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if id is not None:
            self.id = id
        if federated is not None:
            self.federated = federated
        if user_urn is not None:
            self.user_urn = user_urn
        PostUserRequest.__init__(self, *args, **kwargs)

    @property
    def account_id(self):
        """Gets the account_id of this User.  # noqa: E501

        Storage Tenant Account ID, or zero for Grid Administrators  # noqa: E501

        :return: The account_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        Storage Tenant Account ID, or zero for Grid Administrators  # noqa: E501

        :param account_id: The account_id of this User.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        UUID for the User (generated automatically)  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        UUID for the User (generated automatically)  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def federated(self):
        """Gets the federated of this User.  # noqa: E501

        true if the User is federated, for example, an LDAP User  # noqa: E501

        :return: The federated of this User.  # noqa: E501
        :rtype: bool
        """
        return self._federated

    @federated.setter
    def federated(self, federated):
        """Sets the federated of this User.

        true if the User is federated, for example, an LDAP User  # noqa: E501

        :param federated: The federated of this User.  # noqa: E501
        :type: bool
        """

        self._federated = federated

    @property
    def user_urn(self):
        """Gets the user_urn of this User.  # noqa: E501

        contains the User uniqueName and Account ID (generated automatically)  # noqa: E501

        :return: The user_urn of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_urn

    @user_urn.setter
    def user_urn(self, user_urn):
        """Sets the user_urn of this User.

        contains the User uniqueName and Account ID (generated automatically)  # noqa: E501

        :param user_urn: The user_urn of this User.  # noqa: E501
        :type: str
        """

        self._user_urn = user_urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
