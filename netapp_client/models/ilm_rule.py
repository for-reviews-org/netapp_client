# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ilm_rule_common import IlmRuleCommon  # noqa: F401,E501

class IlmRule(IlmRuleCommon):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'str',
        'schema_version': 'str',
        'display_name': 'str',
        'description': 'str',
        'active': 'bool',
        'proposed': 'bool',
        'permissions': 'list[IlmRulePermissions]',
        'compliance_compatible': 'bool'
    }
    if hasattr(IlmRuleCommon, "swagger_types"):
        swagger_types.update(IlmRuleCommon.swagger_types)

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'schema_version': 'schemaVersion',
        'display_name': 'displayName',
        'description': 'description',
        'active': 'active',
        'proposed': 'proposed',
        'permissions': 'permissions',
        'compliance_compatible': 'complianceCompatible'
    }
    if hasattr(IlmRuleCommon, "attribute_map"):
        attribute_map.update(IlmRuleCommon.attribute_map)

    def __init__(self, id=None, version=None, schema_version=None, display_name=None, description=None, active=False, proposed=False, permissions=None, compliance_compatible=False, *args, **kwargs):  # noqa: E501
        """IlmRule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._schema_version = None
        self._display_name = None
        self._description = None
        self._active = None
        self._proposed = None
        self._permissions = None
        self._compliance_compatible = None
        self.discriminator = None
        self.id = id
        self.version = version
        if schema_version is not None:
            self.schema_version = schema_version
        self.display_name = display_name
        if description is not None:
            self.description = description
        if active is not None:
            self.active = active
        if proposed is not None:
            self.proposed = proposed
        if permissions is not None:
            self.permissions = permissions
        if compliance_compatible is not None:
            self.compliance_compatible = compliance_compatible
        IlmRuleCommon.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this IlmRule.  # noqa: E501


        :return: The id of this IlmRule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IlmRule.


        :param id: The id of this IlmRule.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self):
        """Gets the version of this IlmRule.  # noqa: E501


        :return: The version of this IlmRule.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IlmRule.


        :param version: The version of this IlmRule.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def schema_version(self):
        """Gets the schema_version of this IlmRule.  # noqa: E501

        omitted for rules created prior to StorageGRID 10.3  # noqa: E501

        :return: The schema_version of this IlmRule.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this IlmRule.

        omitted for rules created prior to StorageGRID 10.3  # noqa: E501

        :param schema_version: The schema_version of this IlmRule.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def display_name(self):
        """Gets the display_name of this IlmRule.  # noqa: E501

        a representative and unique name for the ILM rule, immutable once the ILM rule is created  # noqa: E501

        :return: The display_name of this IlmRule.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IlmRule.

        a representative and unique name for the ILM rule, immutable once the ILM rule is created  # noqa: E501

        :param display_name: The display_name of this IlmRule.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this IlmRule.  # noqa: E501

        the description of the ILM rule  # noqa: E501

        :return: The description of this IlmRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IlmRule.

        the description of the ILM rule  # noqa: E501

        :param description: The description of this IlmRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this IlmRule.  # noqa: E501

        when requested via include parameter, indicates whether or not the ILM rule is currently used in an active ILM policy  # noqa: E501

        :return: The active of this IlmRule.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IlmRule.

        when requested via include parameter, indicates whether or not the ILM rule is currently used in an active ILM policy  # noqa: E501

        :param active: The active of this IlmRule.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def proposed(self):
        """Gets the proposed of this IlmRule.  # noqa: E501

        when requested via include parameter, indicates whether or not the ILM rule is currently proposed for the active ILM policy  # noqa: E501

        :return: The proposed of this IlmRule.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this IlmRule.

        when requested via include parameter, indicates whether or not the ILM rule is currently proposed for the active ILM policy  # noqa: E501

        :param proposed: The proposed of this IlmRule.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def permissions(self):
        """Gets the permissions of this IlmRule.  # noqa: E501

        when requested via include parameter, a list of allowed operations for this ILM rule  # noqa: E501

        :return: The permissions of this IlmRule.  # noqa: E501
        :rtype: list[IlmRulePermissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this IlmRule.

        when requested via include parameter, a list of allowed operations for this ILM rule  # noqa: E501

        :param permissions: The permissions of this IlmRule.  # noqa: E501
        :type: list[IlmRulePermissions]
        """

        self._permissions = permissions

    @property
    def compliance_compatible(self):
        """Gets the compliance_compatible of this IlmRule.  # noqa: E501

        when requested via include parameter, indicates whether the rule satisfies the requirements of a legacy compliant or S3 Object Lock bucket  # noqa: E501

        :return: The compliance_compatible of this IlmRule.  # noqa: E501
        :rtype: bool
        """
        return self._compliance_compatible

    @compliance_compatible.setter
    def compliance_compatible(self, compliance_compatible):
        """Sets the compliance_compatible of this IlmRule.

        when requested via include parameter, indicates whether the rule satisfies the requirements of a legacy compliant or S3 Object Lock bucket  # noqa: E501

        :param compliance_compatible: The compliance_compatible of this IlmRule.  # noqa: E501
        :type: bool
        """

        self._compliance_compatible = compliance_compatible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlmRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlmRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
