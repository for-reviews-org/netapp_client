# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CertificateDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'issuer': 'str',
        'serial_number': 'str',
        'not_before': 'str',
        'not_after': 'str',
        'subject_alt_names': 'list[str]',
        'finger_prints': 'CertificateFingerPrints'
    }

    attribute_map = {
        'subject': 'subject',
        'issuer': 'issuer',
        'serial_number': 'serialNumber',
        'not_before': 'notBefore',
        'not_after': 'notAfter',
        'subject_alt_names': 'subjectAltNames',
        'finger_prints': 'fingerPrints'
    }

    def __init__(self, subject=None, issuer=None, serial_number=None, not_before=None, not_after=None, subject_alt_names=None, finger_prints=None):  # noqa: E501
        """CertificateDetails - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._issuer = None
        self._serial_number = None
        self._not_before = None
        self._not_after = None
        self._subject_alt_names = None
        self._finger_prints = None
        self.discriminator = None
        self.subject = subject
        self.issuer = issuer
        self.serial_number = serial_number
        self.not_before = not_before
        self.not_after = not_after
        if subject_alt_names is not None:
            self.subject_alt_names = subject_alt_names
        self.finger_prints = finger_prints

    @property
    def subject(self):
        """Gets the subject of this CertificateDetails.  # noqa: E501

        distinguished name of this certificate's entity  # noqa: E501

        :return: The subject of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateDetails.

        distinguished name of this certificate's entity  # noqa: E501

        :param subject: The subject of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def issuer(self):
        """Gets the issuer of this CertificateDetails.  # noqa: E501

        distinguished name of the entity that signed and issued this certificate  # noqa: E501

        :return: The issuer of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateDetails.

        distinguished name of the entity that signed and issued this certificate  # noqa: E501

        :param issuer: The issuer of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501

        self._issuer = issuer

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateDetails.  # noqa: E501

        unique certificate serial number assigned by the CA  # noqa: E501

        :return: The serial_number of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateDetails.

        unique certificate serial number assigned by the CA  # noqa: E501

        :param serial_number: The serial_number of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def not_before(self):
        """Gets the not_before of this CertificateDetails.  # noqa: E501

        start of validity period  # noqa: E501

        :return: The not_before of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateDetails.

        start of validity period  # noqa: E501

        :param not_before: The not_before of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if not_before is None:
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateDetails.  # noqa: E501

        end of validity period  # noqa: E501

        :return: The not_after of this CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateDetails.

        end of validity period  # noqa: E501

        :param not_after: The not_after of this CertificateDetails.  # noqa: E501
        :type: str
        """
        if not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this CertificateDetails.  # noqa: E501

        identities in addition to or in place of the identity in the subject field  # noqa: E501

        :return: The subject_alt_names of this CertificateDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this CertificateDetails.

        identities in addition to or in place of the identity in the subject field  # noqa: E501

        :param subject_alt_names: The subject_alt_names of this CertificateDetails.  # noqa: E501
        :type: list[str]
        """

        self._subject_alt_names = subject_alt_names

    @property
    def finger_prints(self):
        """Gets the finger_prints of this CertificateDetails.  # noqa: E501


        :return: The finger_prints of this CertificateDetails.  # noqa: E501
        :rtype: CertificateFingerPrints
        """
        return self._finger_prints

    @finger_prints.setter
    def finger_prints(self, finger_prints):
        """Sets the finger_prints of this CertificateDetails.


        :param finger_prints: The finger_prints of this CertificateDetails.  # noqa: E501
        :type: CertificateFingerPrints
        """
        if finger_prints is None:
            raise ValueError("Invalid value for `finger_prints`, must not be `None`")  # noqa: E501

        self._finger_prints = finger_prints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
