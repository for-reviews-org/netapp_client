# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_account_identity_source': 'bool',
        'allow_platform_services': 'bool',
        'quota_object_bytes': 'int'
    }

    attribute_map = {
        'use_account_identity_source': 'useAccountIdentitySource',
        'allow_platform_services': 'allowPlatformServices',
        'quota_object_bytes': 'quotaObjectBytes'
    }

    def __init__(self, use_account_identity_source=True, allow_platform_services=False, quota_object_bytes=None):  # noqa: E501
        """PolicyAccount - a model defined in Swagger"""  # noqa: E501
        self._use_account_identity_source = None
        self._allow_platform_services = None
        self._quota_object_bytes = None
        self.discriminator = None
        self.use_account_identity_source = use_account_identity_source
        self.allow_platform_services = allow_platform_services
        if quota_object_bytes is not None:
            self.quota_object_bytes = quota_object_bytes

    @property
    def use_account_identity_source(self):
        """Gets the use_account_identity_source of this PolicyAccount.  # noqa: E501

        whether the tenant account should configure its own identity source. If false, the tenant uses the grid-wide identity source.  # noqa: E501

        :return: The use_account_identity_source of this PolicyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._use_account_identity_source

    @use_account_identity_source.setter
    def use_account_identity_source(self, use_account_identity_source):
        """Sets the use_account_identity_source of this PolicyAccount.

        whether the tenant account should configure its own identity source. If false, the tenant uses the grid-wide identity source.  # noqa: E501

        :param use_account_identity_source: The use_account_identity_source of this PolicyAccount.  # noqa: E501
        :type: bool
        """
        if use_account_identity_source is None:
            raise ValueError("Invalid value for `use_account_identity_source`, must not be `None`")  # noqa: E501

        self._use_account_identity_source = use_account_identity_source

    @property
    def allow_platform_services(self):
        """Gets the allow_platform_services of this PolicyAccount.  # noqa: E501

        allows a tenant to use platform services features such as CloudMirror. These features send data to an external service that is specified using a StorageGRID endpoint.  # noqa: E501

        :return: The allow_platform_services of this PolicyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._allow_platform_services

    @allow_platform_services.setter
    def allow_platform_services(self, allow_platform_services):
        """Sets the allow_platform_services of this PolicyAccount.

        allows a tenant to use platform services features such as CloudMirror. These features send data to an external service that is specified using a StorageGRID endpoint.  # noqa: E501

        :param allow_platform_services: The allow_platform_services of this PolicyAccount.  # noqa: E501
        :type: bool
        """
        if allow_platform_services is None:
            raise ValueError("Invalid value for `allow_platform_services`, must not be `None`")  # noqa: E501

        self._allow_platform_services = allow_platform_services

    @property
    def quota_object_bytes(self):
        """Gets the quota_object_bytes of this PolicyAccount.  # noqa: E501

        the maximum number of bytes available for this tenant's objects. Represents a logical amount (object size), not a physical amount (size on disk). If null, an unlimited number of bytes is available.  # noqa: E501

        :return: The quota_object_bytes of this PolicyAccount.  # noqa: E501
        :rtype: int
        """
        return self._quota_object_bytes

    @quota_object_bytes.setter
    def quota_object_bytes(self, quota_object_bytes):
        """Sets the quota_object_bytes of this PolicyAccount.

        the maximum number of bytes available for this tenant's objects. Represents a logical amount (object size), not a physical amount (size on disk). If null, an unlimited number of bytes is available.  # noqa: E501

        :param quota_object_bytes: The quota_object_bytes of this PolicyAccount.  # noqa: E501
        :type: int
        """

        self._quota_object_bytes = quota_object_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
