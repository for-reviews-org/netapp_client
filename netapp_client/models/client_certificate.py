# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'public_key': 'str',
        'allow_prometheus': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'public_key': 'publicKey',
        'allow_prometheus': 'allowPrometheus'
    }

    def __init__(self, id=None, display_name=None, public_key=None, allow_prometheus=None):  # noqa: E501
        """ClientCertificate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._public_key = None
        self._allow_prometheus = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        self.public_key = public_key
        self.allow_prometheus = allow_prometheus

    @property
    def id(self):
        """Gets the id of this ClientCertificate.  # noqa: E501

        A unique identifier for the client certificate  # noqa: E501

        :return: The id of this ClientCertificate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientCertificate.

        A unique identifier for the client certificate  # noqa: E501

        :param id: The id of this ClientCertificate.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ClientCertificate.  # noqa: E501

        Display name of the certificate  # noqa: E501

        :return: The display_name of this ClientCertificate.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClientCertificate.

        Display name of the certificate  # noqa: E501

        :param display_name: The display_name of this ClientCertificate.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def public_key(self):
        """Gets the public_key of this ClientCertificate.  # noqa: E501

        Client certificate in PEM encoding  # noqa: E501

        :return: The public_key of this ClientCertificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ClientCertificate.

        Client certificate in PEM encoding  # noqa: E501

        :param public_key: The public_key of this ClientCertificate.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def allow_prometheus(self):
        """Gets the allow_prometheus of this ClientCertificate.  # noqa: E501

        Whether Prometheus access is allowed  # noqa: E501

        :return: The allow_prometheus of this ClientCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._allow_prometheus

    @allow_prometheus.setter
    def allow_prometheus(self, allow_prometheus):
        """Sets the allow_prometheus of this ClientCertificate.

        Whether Prometheus access is allowed  # noqa: E501

        :param allow_prometheus: The allow_prometheus of this ClientCertificate.  # noqa: E501
        :type: bool
        """
        if allow_prometheus is None:
            raise ValueError("Invalid value for `allow_prometheus`, must not be `None`")  # noqa: E501

        self._allow_prometheus = allow_prometheus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
