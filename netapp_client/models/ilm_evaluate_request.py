# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IlmEvaluateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'str',
        'object_id': 'str',
        'now': 'datetime'
    }

    attribute_map = {
        'api': 'api',
        'object_id': 'objectId',
        'now': 'now'
    }

    def __init__(self, api='s3', object_id=None, now=None):  # noqa: E501
        """IlmEvaluateRequest - a model defined in Swagger"""  # noqa: E501
        self._api = None
        self._object_id = None
        self._now = None
        self.discriminator = None
        if api is not None:
            self.api = api
        self.object_id = object_id
        if now is not None:
            self.now = now

    @property
    def api(self):
        """Gets the api of this IlmEvaluateRequest.  # noqa: E501

        the object API that the provided object was evaluated against  # noqa: E501

        :return: The api of this IlmEvaluateRequest.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this IlmEvaluateRequest.

        the object API that the provided object was evaluated against  # noqa: E501

        :param api: The api of this IlmEvaluateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["s3", "swift"]  # noqa: E501
        if api not in allowed_values:
            raise ValueError(
                "Invalid value for `api` ({0}), must be one of {1}"  # noqa: E501
                .format(api, allowed_values)
            )

        self._api = api

    @property
    def object_id(self):
        """Gets the object_id of this IlmEvaluateRequest.  # noqa: E501

        Protocol-specific object identifier.  # noqa: E501

        :return: The object_id of this IlmEvaluateRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this IlmEvaluateRequest.

        Protocol-specific object identifier.  # noqa: E501

        :param object_id: The object_id of this IlmEvaluateRequest.  # noqa: E501
        :type: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def now(self):
        """Gets the now of this IlmEvaluateRequest.  # noqa: E501

        ISO 8601 timestamp indicating that ILM evaluation should occur immediately.  # noqa: E501

        :return: The now of this IlmEvaluateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this IlmEvaluateRequest.

        ISO 8601 timestamp indicating that ILM evaluation should occur immediately.  # noqa: E501

        :param now: The now of this IlmEvaluateRequest.  # noqa: E501
        :type: datetime
        """

        self._now = now

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlmEvaluateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlmEvaluateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
