# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentAlarm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'severity': 'str',
        'attribute_code': 'str',
        'attribute_index': 'int',
        'trigger_value': 'str',
        'trigger_time': 'datetime',
        'acknowledge_time': 'datetime'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'severity': 'severity',
        'attribute_code': 'attributeCode',
        'attribute_index': 'attributeIndex',
        'trigger_value': 'triggerValue',
        'trigger_time': 'triggerTime',
        'acknowledge_time': 'acknowledgeTime'
    }

    def __init__(self, source_id=None, severity=None, attribute_code=None, attribute_index=None, trigger_value=None, trigger_time=None, acknowledge_time=None):  # noqa: E501
        """CurrentAlarm - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._severity = None
        self._attribute_code = None
        self._attribute_index = None
        self._trigger_value = None
        self._trigger_time = None
        self._acknowledge_time = None
        self.discriminator = None
        self.source_id = source_id
        self.severity = severity
        self.attribute_code = attribute_code
        self.attribute_index = attribute_index
        self.trigger_value = trigger_value
        self.trigger_time = trigger_time
        if acknowledge_time is not None:
            self.acknowledge_time = acknowledge_time

    @property
    def source_id(self):
        """Gets the source_id of this CurrentAlarm.  # noqa: E501

        the Node ID or OID of the alarm source  # noqa: E501

        :return: The source_id of this CurrentAlarm.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CurrentAlarm.

        the Node ID or OID of the alarm source  # noqa: E501

        :param source_id: The source_id of this CurrentAlarm.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def severity(self):
        """Gets the severity of this CurrentAlarm.  # noqa: E501

        severity level of the alarm  # noqa: E501

        :return: The severity of this CurrentAlarm.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CurrentAlarm.

        severity level of the alarm  # noqa: E501

        :param severity: The severity of this CurrentAlarm.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["critical", "major", "minor", "notice"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def attribute_code(self):
        """Gets the attribute_code of this CurrentAlarm.  # noqa: E501

        the four-character code for the alarm source attribute  # noqa: E501

        :return: The attribute_code of this CurrentAlarm.  # noqa: E501
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this CurrentAlarm.

        the four-character code for the alarm source attribute  # noqa: E501

        :param attribute_code: The attribute_code of this CurrentAlarm.  # noqa: E501
        :type: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")  # noqa: E501

        self._attribute_code = attribute_code

    @property
    def attribute_index(self):
        """Gets the attribute_index of this CurrentAlarm.  # noqa: E501

        multi-value attributes use the index to indicate which value triggered the alarm, starting at 1  # noqa: E501

        :return: The attribute_index of this CurrentAlarm.  # noqa: E501
        :rtype: int
        """
        return self._attribute_index

    @attribute_index.setter
    def attribute_index(self, attribute_index):
        """Sets the attribute_index of this CurrentAlarm.

        multi-value attributes use the index to indicate which value triggered the alarm, starting at 1  # noqa: E501

        :param attribute_index: The attribute_index of this CurrentAlarm.  # noqa: E501
        :type: int
        """
        if attribute_index is None:
            raise ValueError("Invalid value for `attribute_index`, must not be `None`")  # noqa: E501

        self._attribute_index = attribute_index

    @property
    def trigger_value(self):
        """Gets the trigger_value of this CurrentAlarm.  # noqa: E501

        the attribute value at the time the alarm was triggered  # noqa: E501

        :return: The trigger_value of this CurrentAlarm.  # noqa: E501
        :rtype: str
        """
        return self._trigger_value

    @trigger_value.setter
    def trigger_value(self, trigger_value):
        """Sets the trigger_value of this CurrentAlarm.

        the attribute value at the time the alarm was triggered  # noqa: E501

        :param trigger_value: The trigger_value of this CurrentAlarm.  # noqa: E501
        :type: str
        """
        if trigger_value is None:
            raise ValueError("Invalid value for `trigger_value`, must not be `None`")  # noqa: E501

        self._trigger_value = trigger_value

    @property
    def trigger_time(self):
        """Gets the trigger_time of this CurrentAlarm.  # noqa: E501

        the date and time when the alarm was triggered  # noqa: E501

        :return: The trigger_time of this CurrentAlarm.  # noqa: E501
        :rtype: datetime
        """
        return self._trigger_time

    @trigger_time.setter
    def trigger_time(self, trigger_time):
        """Sets the trigger_time of this CurrentAlarm.

        the date and time when the alarm was triggered  # noqa: E501

        :param trigger_time: The trigger_time of this CurrentAlarm.  # noqa: E501
        :type: datetime
        """
        if trigger_time is None:
            raise ValueError("Invalid value for `trigger_time`, must not be `None`")  # noqa: E501

        self._trigger_time = trigger_time

    @property
    def acknowledge_time(self):
        """Gets the acknowledge_time of this CurrentAlarm.  # noqa: E501

        the date and time when the alarm was acknowledged, or null if not acknowledged  # noqa: E501

        :return: The acknowledge_time of this CurrentAlarm.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledge_time

    @acknowledge_time.setter
    def acknowledge_time(self, acknowledge_time):
        """Sets the acknowledge_time of this CurrentAlarm.

        the date and time when the alarm was acknowledged, or null if not acknowledged  # noqa: E501

        :param acknowledge_time: The acknowledge_time of this CurrentAlarm.  # noqa: E501
        :type: datetime
        """

        self._acknowledge_time = acknowledge_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentAlarm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentAlarm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
