# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostRecoveryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ip': 'str',
        'name': 'str',
        'oid': 'str',
        'passphrase': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ip': 'ip',
        'name': 'name',
        'oid': 'oid',
        'passphrase': 'passphrase'
    }

    def __init__(self, id=None, ip=None, name=None, oid=None, passphrase=None):  # noqa: E501
        """PostRecoveryRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ip = None
        self._name = None
        self._oid = None
        self._passphrase = None
        self.discriminator = None
        self.id = id
        self.ip = ip
        self.name = name
        self.oid = oid
        self.passphrase = passphrase

    @property
    def id(self):
        """Gets the id of this PostRecoveryRequest.  # noqa: E501

        a random uuid assigned to the replacement node when deployed, not the provisioned permanent node ID  # noqa: E501

        :return: The id of this PostRecoveryRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostRecoveryRequest.

        a random uuid assigned to the replacement node when deployed, not the provisioned permanent node ID  # noqa: E501

        :param id: The id of this PostRecoveryRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this PostRecoveryRequest.  # noqa: E501

        the grid network ip address for the recovered node  # noqa: E501

        :return: The ip of this PostRecoveryRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this PostRecoveryRequest.

        the grid network ip address for the recovered node  # noqa: E501

        :param ip: The ip of this PostRecoveryRequest.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def name(self):
        """Gets the name of this PostRecoveryRequest.  # noqa: E501

        the name of the recovered node (must be a valid hostname)  # noqa: E501

        :return: The name of this PostRecoveryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostRecoveryRequest.

        the name of the recovered node (must be a valid hostname)  # noqa: E501

        :param name: The name of this PostRecoveryRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def oid(self):
        """Gets the oid of this PostRecoveryRequest.  # noqa: E501

        OID of the recovered node  # noqa: E501

        :return: The oid of this PostRecoveryRequest.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this PostRecoveryRequest.

        OID of the recovered node  # noqa: E501

        :param oid: The oid of this PostRecoveryRequest.  # noqa: E501
        :type: str
        """
        if oid is None:
            raise ValueError("Invalid value for `oid`, must not be `None`")  # noqa: E501

        self._oid = oid

    @property
    def passphrase(self):
        """Gets the passphrase of this PostRecoveryRequest.  # noqa: E501

        the password used during recovery procedures   # noqa: E501

        :return: The passphrase of this PostRecoveryRequest.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this PostRecoveryRequest.

        the password used during recovery procedures   # noqa: E501

        :param passphrase: The passphrase of this PostRecoveryRequest.  # noqa: E501
        :type: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")  # noqa: E501

        self._passphrase = passphrase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRecoveryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRecoveryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
