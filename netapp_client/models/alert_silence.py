# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertSilence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'datetime',
        'comment': 'str',
        'maximum_severity': 'str',
        'matchers': 'list[AlertSilenceMatcher]'
    }

    attribute_map = {
        'end_time': 'endTime',
        'comment': 'comment',
        'maximum_severity': 'maximumSeverity',
        'matchers': 'matchers'
    }

    def __init__(self, end_time=None, comment=None, maximum_severity=None, matchers=None):  # noqa: E501
        """AlertSilence - a model defined in Swagger"""  # noqa: E501
        self._end_time = None
        self._comment = None
        self._maximum_severity = None
        self._matchers = None
        self.discriminator = None
        self.end_time = end_time
        if comment is not None:
            self.comment = comment
        self.maximum_severity = maximum_severity
        self.matchers = matchers

    @property
    def end_time(self):
        """Gets the end_time of this AlertSilence.  # noqa: E501

        the time the silence will stop suppressing notifications  # noqa: E501

        :return: The end_time of this AlertSilence.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AlertSilence.

        the time the silence will stop suppressing notifications  # noqa: E501

        :param end_time: The end_time of this AlertSilence.  # noqa: E501
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def comment(self):
        """Gets the comment of this AlertSilence.  # noqa: E501

        a comment to describe the silence  # noqa: E501

        :return: The comment of this AlertSilence.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AlertSilence.

        a comment to describe the silence  # noqa: E501

        :param comment: The comment of this AlertSilence.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def maximum_severity(self):
        """Gets the maximum_severity of this AlertSilence.  # noqa: E501

        the maximum severity level for silences. For example, \"major\" will silence minor and major alerts, but will not silence critical alerts.  # noqa: E501

        :return: The maximum_severity of this AlertSilence.  # noqa: E501
        :rtype: str
        """
        return self._maximum_severity

    @maximum_severity.setter
    def maximum_severity(self, maximum_severity):
        """Sets the maximum_severity of this AlertSilence.

        the maximum severity level for silences. For example, \"major\" will silence minor and major alerts, but will not silence critical alerts.  # noqa: E501

        :param maximum_severity: The maximum_severity of this AlertSilence.  # noqa: E501
        :type: str
        """
        if maximum_severity is None:
            raise ValueError("Invalid value for `maximum_severity`, must not be `None`")  # noqa: E501
        allowed_values = ["minor", "major", "critical"]  # noqa: E501
        if maximum_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `maximum_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(maximum_severity, allowed_values)
            )

        self._maximum_severity = maximum_severity

    @property
    def matchers(self):
        """Gets the matchers of this AlertSilence.  # noqa: E501

        Optionally, one or more name/value pairs used to match an alert's labels. An alert is silenced if all specified name/value pairs match its labels. If no name/value pairs are specified, all alerts are silenced, based on the other filtering criteria.  # noqa: E501

        :return: The matchers of this AlertSilence.  # noqa: E501
        :rtype: list[AlertSilenceMatcher]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this AlertSilence.

        Optionally, one or more name/value pairs used to match an alert's labels. An alert is silenced if all specified name/value pairs match its labels. If no name/value pairs are specified, all alerts are silenced, based on the other filtering criteria.  # noqa: E501

        :param matchers: The matchers of this AlertSilence.  # noqa: E501
        :type: list[AlertSilenceMatcher]
        """
        if matchers is None:
            raise ValueError("Invalid value for `matchers`, must not be `None`")  # noqa: E501

        self._matchers = matchers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertSilence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertSilence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
