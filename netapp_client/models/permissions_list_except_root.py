# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionsListExceptRoot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarm_acknowledgment': 'bool',
        'manage_alerts': 'bool',
        'other_grid_configuration': 'bool',
        'grid_topology_page_configuration': 'bool',
        'tenant_accounts': 'bool',
        'change_tenant_root_password': 'bool',
        'maintenance': 'bool',
        'metrics_query': 'bool',
        'activate_features': 'bool',
        'ilm': 'bool',
        'object_metadata': 'bool',
        'storage_admin': 'bool'
    }

    attribute_map = {
        'alarm_acknowledgment': 'alarmAcknowledgment',
        'manage_alerts': 'manageAlerts',
        'other_grid_configuration': 'otherGridConfiguration',
        'grid_topology_page_configuration': 'gridTopologyPageConfiguration',
        'tenant_accounts': 'tenantAccounts',
        'change_tenant_root_password': 'changeTenantRootPassword',
        'maintenance': 'maintenance',
        'metrics_query': 'metricsQuery',
        'activate_features': 'activateFeatures',
        'ilm': 'ilm',
        'object_metadata': 'objectMetadata',
        'storage_admin': 'storageAdmin'
    }

    def __init__(self, alarm_acknowledgment=None, manage_alerts=None, other_grid_configuration=None, grid_topology_page_configuration=None, tenant_accounts=None, change_tenant_root_password=None, maintenance=None, metrics_query=None, activate_features=False, ilm=None, object_metadata=None, storage_admin=None):  # noqa: E501
        """PermissionsListExceptRoot - a model defined in Swagger"""  # noqa: E501
        self._alarm_acknowledgment = None
        self._manage_alerts = None
        self._other_grid_configuration = None
        self._grid_topology_page_configuration = None
        self._tenant_accounts = None
        self._change_tenant_root_password = None
        self._maintenance = None
        self._metrics_query = None
        self._activate_features = None
        self._ilm = None
        self._object_metadata = None
        self._storage_admin = None
        self.discriminator = None
        if alarm_acknowledgment is not None:
            self.alarm_acknowledgment = alarm_acknowledgment
        if manage_alerts is not None:
            self.manage_alerts = manage_alerts
        if other_grid_configuration is not None:
            self.other_grid_configuration = other_grid_configuration
        if grid_topology_page_configuration is not None:
            self.grid_topology_page_configuration = grid_topology_page_configuration
        if tenant_accounts is not None:
            self.tenant_accounts = tenant_accounts
        if change_tenant_root_password is not None:
            self.change_tenant_root_password = change_tenant_root_password
        if maintenance is not None:
            self.maintenance = maintenance
        if metrics_query is not None:
            self.metrics_query = metrics_query
        if activate_features is not None:
            self.activate_features = activate_features
        if ilm is not None:
            self.ilm = ilm
        if object_metadata is not None:
            self.object_metadata = object_metadata
        if storage_admin is not None:
            self.storage_admin = storage_admin

    @property
    def alarm_acknowledgment(self):
        """Gets the alarm_acknowledgment of this PermissionsListExceptRoot.  # noqa: E501

        ability to acknowledge alarms  # noqa: E501

        :return: The alarm_acknowledgment of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._alarm_acknowledgment

    @alarm_acknowledgment.setter
    def alarm_acknowledgment(self, alarm_acknowledgment):
        """Sets the alarm_acknowledgment of this PermissionsListExceptRoot.

        ability to acknowledge alarms  # noqa: E501

        :param alarm_acknowledgment: The alarm_acknowledgment of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._alarm_acknowledgment = alarm_acknowledgment

    @property
    def manage_alerts(self):
        """Gets the manage_alerts of this PermissionsListExceptRoot.  # noqa: E501

        ability to manage silences, alert notifications, and alert rules  # noqa: E501

        :return: The manage_alerts of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._manage_alerts

    @manage_alerts.setter
    def manage_alerts(self, manage_alerts):
        """Sets the manage_alerts of this PermissionsListExceptRoot.

        ability to manage silences, alert notifications, and alert rules  # noqa: E501

        :param manage_alerts: The manage_alerts of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._manage_alerts = manage_alerts

    @property
    def other_grid_configuration(self):
        """Gets the other_grid_configuration of this PermissionsListExceptRoot.  # noqa: E501

        ability to access configuration pages not covered by other permissions  # noqa: E501

        :return: The other_grid_configuration of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._other_grid_configuration

    @other_grid_configuration.setter
    def other_grid_configuration(self, other_grid_configuration):
        """Sets the other_grid_configuration of this PermissionsListExceptRoot.

        ability to access configuration pages not covered by other permissions  # noqa: E501

        :param other_grid_configuration: The other_grid_configuration of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._other_grid_configuration = other_grid_configuration

    @property
    def grid_topology_page_configuration(self):
        """Gets the grid_topology_page_configuration of this PermissionsListExceptRoot.  # noqa: E501

        ability to access Grid Topology configuration tabs and modify otherGridConfiguration pages  # noqa: E501

        :return: The grid_topology_page_configuration of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._grid_topology_page_configuration

    @grid_topology_page_configuration.setter
    def grid_topology_page_configuration(self, grid_topology_page_configuration):
        """Sets the grid_topology_page_configuration of this PermissionsListExceptRoot.

        ability to access Grid Topology configuration tabs and modify otherGridConfiguration pages  # noqa: E501

        :param grid_topology_page_configuration: The grid_topology_page_configuration of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._grid_topology_page_configuration = grid_topology_page_configuration

    @property
    def tenant_accounts(self):
        """Gets the tenant_accounts of this PermissionsListExceptRoot.  # noqa: E501

        ability to add, edit, or remove tenant accounts (The deprecated management API v1 also uses this permission to manage tenant group policies, reset Swift admin passwords, and manage root user S3 access keys.)   # noqa: E501

        :return: The tenant_accounts of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._tenant_accounts

    @tenant_accounts.setter
    def tenant_accounts(self, tenant_accounts):
        """Sets the tenant_accounts of this PermissionsListExceptRoot.

        ability to add, edit, or remove tenant accounts (The deprecated management API v1 also uses this permission to manage tenant group policies, reset Swift admin passwords, and manage root user S3 access keys.)   # noqa: E501

        :param tenant_accounts: The tenant_accounts of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._tenant_accounts = tenant_accounts

    @property
    def change_tenant_root_password(self):
        """Gets the change_tenant_root_password of this PermissionsListExceptRoot.  # noqa: E501

        ability to reset the root user password for tenant accounts   # noqa: E501

        :return: The change_tenant_root_password of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._change_tenant_root_password

    @change_tenant_root_password.setter
    def change_tenant_root_password(self, change_tenant_root_password):
        """Sets the change_tenant_root_password of this PermissionsListExceptRoot.

        ability to reset the root user password for tenant accounts   # noqa: E501

        :param change_tenant_root_password: The change_tenant_root_password of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._change_tenant_root_password = change_tenant_root_password

    @property
    def maintenance(self):
        """Gets the maintenance of this PermissionsListExceptRoot.  # noqa: E501

        ability to perform maintenance procedures: software upgrade, expansion, decommission, and Recovery Package download; ability to configure DNS servers, NTP servers, grid license, domain names, server certificates, and audit; ability to collect logs; ability to list HA groups.   # noqa: E501

        :return: The maintenance of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this PermissionsListExceptRoot.

        ability to perform maintenance procedures: software upgrade, expansion, decommission, and Recovery Package download; ability to configure DNS servers, NTP servers, grid license, domain names, server certificates, and audit; ability to collect logs; ability to list HA groups.   # noqa: E501

        :param maintenance: The maintenance of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._maintenance = maintenance

    @property
    def metrics_query(self):
        """Gets the metrics_query of this PermissionsListExceptRoot.  # noqa: E501

        ability to perform custom Prometheus metrics queries   # noqa: E501

        :return: The metrics_query of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._metrics_query

    @metrics_query.setter
    def metrics_query(self, metrics_query):
        """Sets the metrics_query of this PermissionsListExceptRoot.

        ability to perform custom Prometheus metrics queries   # noqa: E501

        :param metrics_query: The metrics_query of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._metrics_query = metrics_query

    @property
    def activate_features(self):
        """Gets the activate_features of this PermissionsListExceptRoot.  # noqa: E501

        ability to reactivate features that have been deactivated via the deactivated-features endpoints (This permission is provided for the option of deactivating it for security; the deactivated-features endpoints require rootAccess, so it is not useful to grant this permission to groups. Warning: this permission itself cannot be reactivated once deactivated, except by technical support.)   # noqa: E501

        :return: The activate_features of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._activate_features

    @activate_features.setter
    def activate_features(self, activate_features):
        """Sets the activate_features of this PermissionsListExceptRoot.

        ability to reactivate features that have been deactivated via the deactivated-features endpoints (This permission is provided for the option of deactivating it for security; the deactivated-features endpoints require rootAccess, so it is not useful to grant this permission to groups. Warning: this permission itself cannot be reactivated once deactivated, except by technical support.)   # noqa: E501

        :param activate_features: The activate_features of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._activate_features = activate_features

    @property
    def ilm(self):
        """Gets the ilm of this PermissionsListExceptRoot.  # noqa: E501

        ability to add, edit, or set ILM policies, ILM rules, and EC profiles; ability to simulate ILM evaluation of objects on the grid   # noqa: E501

        :return: The ilm of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._ilm

    @ilm.setter
    def ilm(self, ilm):
        """Sets the ilm of this PermissionsListExceptRoot.

        ability to add, edit, or set ILM policies, ILM rules, and EC profiles; ability to simulate ILM evaluation of objects on the grid   # noqa: E501

        :param ilm: The ilm of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._ilm = ilm

    @property
    def object_metadata(self):
        """Gets the object_metadata of this PermissionsListExceptRoot.  # noqa: E501

        ability to look up object metadata for any object stored on the grid   # noqa: E501

        :return: The object_metadata of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._object_metadata

    @object_metadata.setter
    def object_metadata(self, object_metadata):
        """Sets the object_metadata of this PermissionsListExceptRoot.

        ability to look up object metadata for any object stored on the grid   # noqa: E501

        :param object_metadata: The object_metadata of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._object_metadata = object_metadata

    @property
    def storage_admin(self):
        """Gets the storage_admin of this PermissionsListExceptRoot.  # noqa: E501

        ability to view and update settings in E-Series SANtricity System Manager from StorageGRID   # noqa: E501

        :return: The storage_admin of this PermissionsListExceptRoot.  # noqa: E501
        :rtype: bool
        """
        return self._storage_admin

    @storage_admin.setter
    def storage_admin(self, storage_admin):
        """Sets the storage_admin of this PermissionsListExceptRoot.

        ability to view and update settings in E-Series SANtricity System Manager from StorageGRID   # noqa: E501

        :param storage_admin: The storage_admin of this PermissionsListExceptRoot.  # noqa: E501
        :type: bool
        """

        self._storage_admin = storage_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionsListExceptRoot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionsListExceptRoot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
