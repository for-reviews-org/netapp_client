# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpansionStageState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stage': 'str',
        'in_progress': 'bool',
        'complete': 'bool'
    }

    attribute_map = {
        'stage': 'stage',
        'in_progress': 'inProgress',
        'complete': 'complete'
    }

    def __init__(self, stage=None, in_progress=None, complete=None):  # noqa: E501
        """ExpansionStageState - a model defined in Swagger"""  # noqa: E501
        self._stage = None
        self._in_progress = None
        self._complete = None
        self.discriminator = None
        self.stage = stage
        self.in_progress = in_progress
        self.complete = complete

    @property
    def stage(self):
        """Gets the stage of this ExpansionStageState.  # noqa: E501

        the name of the overall stage in the expansion procedure  # noqa: E501

        :return: The stage of this ExpansionStageState.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this ExpansionStageState.

        the name of the overall stage in the expansion procedure  # noqa: E501

        :param stage: The stage of this ExpansionStageState.  # noqa: E501
        :type: str
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")  # noqa: E501
        allowed_values = ["installNodes", "initial", "cassandraNewSite", "addNodesToGrid", "startingNodes", "cassandraCleanup"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"  # noqa: E501
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def in_progress(self):
        """Gets the in_progress of this ExpansionStageState.  # noqa: E501

        whether the overall stage is in progress  # noqa: E501

        :return: The in_progress of this ExpansionStageState.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ExpansionStageState.

        whether the overall stage is in progress  # noqa: E501

        :param in_progress: The in_progress of this ExpansionStageState.  # noqa: E501
        :type: bool
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")  # noqa: E501

        self._in_progress = in_progress

    @property
    def complete(self):
        """Gets the complete of this ExpansionStageState.  # noqa: E501

        whether the overall stage is complete  # noqa: E501

        :return: The complete of this ExpansionStageState.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this ExpansionStageState.

        whether the overall stage is complete  # noqa: E501

        :param complete: The complete of this ExpansionStageState.  # noqa: E501
        :type: bool
        """
        if complete is None:
            raise ValueError("Invalid value for `complete`, must not be `None`")  # noqa: E501

        self._complete = complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpansionStageState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpansionStageState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
