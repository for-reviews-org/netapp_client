# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_logout': 'int',
        'user': 'ConfigUser',
        'token': 'ConfigToken',
        'permissions': 'PolicyManagement',
        'deactivated_features': 'DeactivatedFeatures',
        'restricted_port': 'bool'
    }

    attribute_map = {
        'auto_logout': 'auto-logout',
        'user': 'user',
        'token': 'token',
        'permissions': 'permissions',
        'deactivated_features': 'deactivatedFeatures',
        'restricted_port': 'restrictedPort'
    }

    def __init__(self, auto_logout=None, user=None, token=None, permissions=None, deactivated_features=None, restricted_port=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        self._auto_logout = None
        self._user = None
        self._token = None
        self._permissions = None
        self._deactivated_features = None
        self._restricted_port = None
        self.discriminator = None
        self.auto_logout = auto_logout
        self.user = user
        self.token = token
        self.permissions = permissions
        if deactivated_features is not None:
            self.deactivated_features = deactivated_features
        self.restricted_port = restricted_port

    @property
    def auto_logout(self):
        """Gets the auto_logout of this Config.  # noqa: E501

        the timeout period for the browser session in seconds (zero for disabled)  # noqa: E501

        :return: The auto_logout of this Config.  # noqa: E501
        :rtype: int
        """
        return self._auto_logout

    @auto_logout.setter
    def auto_logout(self, auto_logout):
        """Sets the auto_logout of this Config.

        the timeout period for the browser session in seconds (zero for disabled)  # noqa: E501

        :param auto_logout: The auto_logout of this Config.  # noqa: E501
        :type: int
        """
        if auto_logout is None:
            raise ValueError("Invalid value for `auto_logout`, must not be `None`")  # noqa: E501

        self._auto_logout = auto_logout

    @property
    def user(self):
        """Gets the user of this Config.  # noqa: E501


        :return: The user of this Config.  # noqa: E501
        :rtype: ConfigUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Config.


        :param user: The user of this Config.  # noqa: E501
        :type: ConfigUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def token(self):
        """Gets the token of this Config.  # noqa: E501


        :return: The token of this Config.  # noqa: E501
        :rtype: ConfigToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Config.


        :param token: The token of this Config.  # noqa: E501
        :type: ConfigToken
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def permissions(self):
        """Gets the permissions of this Config.  # noqa: E501


        :return: The permissions of this Config.  # noqa: E501
        :rtype: PolicyManagement
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Config.


        :param permissions: The permissions of this Config.  # noqa: E501
        :type: PolicyManagement
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def deactivated_features(self):
        """Gets the deactivated_features of this Config.  # noqa: E501


        :return: The deactivated_features of this Config.  # noqa: E501
        :rtype: DeactivatedFeatures
        """
        return self._deactivated_features

    @deactivated_features.setter
    def deactivated_features(self, deactivated_features):
        """Sets the deactivated_features of this Config.


        :param deactivated_features: The deactivated_features of this Config.  # noqa: E501
        :type: DeactivatedFeatures
        """

        self._deactivated_features = deactivated_features

    @property
    def restricted_port(self):
        """Gets the restricted_port of this Config.  # noqa: E501

        whether your current connection is using a restricted port that allows access to Grid Management APIs (/grid) but prevents access to Tenant Management APIs (/org)  # noqa: E501

        :return: The restricted_port of this Config.  # noqa: E501
        :rtype: bool
        """
        return self._restricted_port

    @restricted_port.setter
    def restricted_port(self, restricted_port):
        """Sets the restricted_port of this Config.

        whether your current connection is using a restricted port that allows access to Grid Management APIs (/grid) but prevents access to Tenant Management APIs (/org)  # noqa: E501

        :param restricted_port: The restricted_port of this Config.  # noqa: E501
        :type: bool
        """
        if restricted_port is None:
            raise ValueError("Invalid value for `restricted_port`, must not be `None`")  # noqa: E501

        self._restricted_port = restricted_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
