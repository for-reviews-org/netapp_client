# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'annotations': 'dict(str, str)',
        'inhibited': 'bool',
        'inhibited_by': 'list[str]',
        'labels': 'dict(str, str)',
        'silenced': 'bool',
        'silenced_by': 'list[str]',
        'starts_at': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'annotations': 'annotations',
        'inhibited': 'inhibited',
        'inhibited_by': 'inhibitedBy',
        'labels': 'labels',
        'silenced': 'silenced',
        'silenced_by': 'silencedBy',
        'starts_at': 'startsAt',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, annotations=None, inhibited=None, inhibited_by=None, labels=None, silenced=None, silenced_by=None, starts_at=None, status=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._annotations = None
        self._inhibited = None
        self._inhibited_by = None
        self._labels = None
        self._silenced = None
        self._silenced_by = None
        self._starts_at = None
        self._status = None
        self.discriminator = None
        self.id = id
        self.name = name
        if annotations is not None:
            self.annotations = annotations
        self.inhibited = inhibited
        if inhibited_by is not None:
            self.inhibited_by = inhibited_by
        self.labels = labels
        self.silenced = silenced
        if silenced_by is not None:
            self.silenced_by = silenced_by
        self.starts_at = starts_at
        self.status = status

    @property
    def id(self):
        """Gets the id of this Alert.  # noqa: E501

        the alert's unique identifier  # noqa: E501

        :return: The id of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alert.

        the alert's unique identifier  # noqa: E501

        :param id: The id of this Alert.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Alert.  # noqa: E501

        the name of the alert  # noqa: E501

        :return: The name of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Alert.

        the name of the alert  # noqa: E501

        :param name: The name of this Alert.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def annotations(self):
        """Gets the annotations of this Alert.  # noqa: E501

        additional informational properties about the alert  # noqa: E501

        :return: The annotations of this Alert.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Alert.

        additional informational properties about the alert  # noqa: E501

        :param annotations: The annotations of this Alert.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def inhibited(self):
        """Gets the inhibited of this Alert.  # noqa: E501

        whether this alert is currently suppressed by another alert  # noqa: E501

        :return: The inhibited of this Alert.  # noqa: E501
        :rtype: bool
        """
        return self._inhibited

    @inhibited.setter
    def inhibited(self, inhibited):
        """Sets the inhibited of this Alert.

        whether this alert is currently suppressed by another alert  # noqa: E501

        :param inhibited: The inhibited of this Alert.  # noqa: E501
        :type: bool
        """
        if inhibited is None:
            raise ValueError("Invalid value for `inhibited`, must not be `None`")  # noqa: E501

        self._inhibited = inhibited

    @property
    def inhibited_by(self):
        """Gets the inhibited_by of this Alert.  # noqa: E501

        the ids of other alerts currently suppressing this alert  # noqa: E501

        :return: The inhibited_by of this Alert.  # noqa: E501
        :rtype: list[str]
        """
        return self._inhibited_by

    @inhibited_by.setter
    def inhibited_by(self, inhibited_by):
        """Sets the inhibited_by of this Alert.

        the ids of other alerts currently suppressing this alert  # noqa: E501

        :param inhibited_by: The inhibited_by of this Alert.  # noqa: E501
        :type: list[str]
        """

        self._inhibited_by = inhibited_by

    @property
    def labels(self):
        """Gets the labels of this Alert.  # noqa: E501

        properties that classify the alert  # noqa: E501

        :return: The labels of this Alert.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Alert.

        properties that classify the alert  # noqa: E501

        :param labels: The labels of this Alert.  # noqa: E501
        :type: dict(str, str)
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def silenced(self):
        """Gets the silenced of this Alert.  # noqa: E501

        whether notifications for this alert are currently suppressed by an active silence  # noqa: E501

        :return: The silenced of this Alert.  # noqa: E501
        :rtype: bool
        """
        return self._silenced

    @silenced.setter
    def silenced(self, silenced):
        """Sets the silenced of this Alert.

        whether notifications for this alert are currently suppressed by an active silence  # noqa: E501

        :param silenced: The silenced of this Alert.  # noqa: E501
        :type: bool
        """
        if silenced is None:
            raise ValueError("Invalid value for `silenced`, must not be `None`")  # noqa: E501

        self._silenced = silenced

    @property
    def silenced_by(self):
        """Gets the silenced_by of this Alert.  # noqa: E501

        silences currently suppressing the alert  # noqa: E501

        :return: The silenced_by of this Alert.  # noqa: E501
        :rtype: list[str]
        """
        return self._silenced_by

    @silenced_by.setter
    def silenced_by(self, silenced_by):
        """Sets the silenced_by of this Alert.

        silences currently suppressing the alert  # noqa: E501

        :param silenced_by: The silenced_by of this Alert.  # noqa: E501
        :type: list[str]
        """

        self._silenced_by = silenced_by

    @property
    def starts_at(self):
        """Gets the starts_at of this Alert.  # noqa: E501

        the time the alert was triggered  # noqa: E501

        :return: The starts_at of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Alert.

        the time the alert was triggered  # noqa: E501

        :param starts_at: The starts_at of this Alert.  # noqa: E501
        :type: datetime
        """
        if starts_at is None:
            raise ValueError("Invalid value for `starts_at`, must not be `None`")  # noqa: E501

        self._starts_at = starts_at

    @property
    def status(self):
        """Gets the status of this Alert.  # noqa: E501

        the status of the alert  # noqa: E501

        :return: The status of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Alert.

        the status of the alert  # noqa: E501

        :param status: The status of this Alert.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "suppressed", "unprocessed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
