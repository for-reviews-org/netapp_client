# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectMetadataLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'node_id': 'str',
        'disk_path': 'str',
        'profile_id': 'str',
        'fragments': 'list[ObjectMetadataLocationFragment]',
        'cloud_storage_pool_id': 'str',
        'cloud_storage_pool_object_key': 'str'
    }

    attribute_map = {
        'type': 'type',
        'node_id': 'nodeId',
        'disk_path': 'diskPath',
        'profile_id': 'profileId',
        'fragments': 'fragments',
        'cloud_storage_pool_id': 'cloudStoragePoolId',
        'cloud_storage_pool_object_key': 'cloudStoragePoolObjectKey'
    }

    def __init__(self, type=None, node_id=None, disk_path=None, profile_id=None, fragments=None, cloud_storage_pool_id=None, cloud_storage_pool_object_key=None):  # noqa: E501
        """ObjectMetadataLocation - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._node_id = None
        self._disk_path = None
        self._profile_id = None
        self._fragments = None
        self._cloud_storage_pool_id = None
        self._cloud_storage_pool_object_key = None
        self.discriminator = None
        self.type = type
        if node_id is not None:
            self.node_id = node_id
        if disk_path is not None:
            self.disk_path = disk_path
        if profile_id is not None:
            self.profile_id = profile_id
        if fragments is not None:
            self.fragments = fragments
        if cloud_storage_pool_id is not None:
            self.cloud_storage_pool_id = cloud_storage_pool_id
        if cloud_storage_pool_object_key is not None:
            self.cloud_storage_pool_object_key = cloud_storage_pool_object_key

    @property
    def type(self):
        """Gets the type of this ObjectMetadataLocation.  # noqa: E501

        the type of copy stored at this location  # noqa: E501

        :return: The type of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjectMetadataLocation.

        the type of copy stored at this location  # noqa: E501

        :param type: The type of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["replicated", "erasureCoded", "cloudStoragePool"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def node_id(self):
        """Gets the node_id of this ObjectMetadataLocation.  # noqa: E501

        a unique identifier for the Grid Node (replicated only)  # noqa: E501

        :return: The node_id of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ObjectMetadataLocation.

        a unique identifier for the Grid Node (replicated only)  # noqa: E501

        :param node_id: The node_id of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def disk_path(self):
        """Gets the disk_path of this ObjectMetadataLocation.  # noqa: E501

        full path to the disk location of the object (replicated only)  # noqa: E501

        :return: The disk_path of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._disk_path

    @disk_path.setter
    def disk_path(self, disk_path):
        """Sets the disk_path of this ObjectMetadataLocation.

        full path to the disk location of the object (replicated only)  # noqa: E501

        :param disk_path: The disk_path of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """

        self._disk_path = disk_path

    @property
    def profile_id(self):
        """Gets the profile_id of this ObjectMetadataLocation.  # noqa: E501

        a unique identifier for the Erasure Coding Profile (erasure coded only)  # noqa: E501

        :return: The profile_id of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ObjectMetadataLocation.

        a unique identifier for the Erasure Coding Profile (erasure coded only)  # noqa: E501

        :param profile_id: The profile_id of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def fragments(self):
        """Gets the fragments of this ObjectMetadataLocation.  # noqa: E501

        the location of each erasure-coded fragment  # noqa: E501

        :return: The fragments of this ObjectMetadataLocation.  # noqa: E501
        :rtype: list[ObjectMetadataLocationFragment]
        """
        return self._fragments

    @fragments.setter
    def fragments(self, fragments):
        """Sets the fragments of this ObjectMetadataLocation.

        the location of each erasure-coded fragment  # noqa: E501

        :param fragments: The fragments of this ObjectMetadataLocation.  # noqa: E501
        :type: list[ObjectMetadataLocationFragment]
        """

        self._fragments = fragments

    @property
    def cloud_storage_pool_id(self):
        """Gets the cloud_storage_pool_id of this ObjectMetadataLocation.  # noqa: E501

        The ID of the Cloud Storage Pool in which the object is stored  # noqa: E501

        :return: The cloud_storage_pool_id of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_pool_id

    @cloud_storage_pool_id.setter
    def cloud_storage_pool_id(self, cloud_storage_pool_id):
        """Sets the cloud_storage_pool_id of this ObjectMetadataLocation.

        The ID of the Cloud Storage Pool in which the object is stored  # noqa: E501

        :param cloud_storage_pool_id: The cloud_storage_pool_id of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """

        self._cloud_storage_pool_id = cloud_storage_pool_id

    @property
    def cloud_storage_pool_object_key(self):
        """Gets the cloud_storage_pool_object_key of this ObjectMetadataLocation.  # noqa: E501

        The key for the object in the Cloud Storage Pool  # noqa: E501

        :return: The cloud_storage_pool_object_key of this ObjectMetadataLocation.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_pool_object_key

    @cloud_storage_pool_object_key.setter
    def cloud_storage_pool_object_key(self, cloud_storage_pool_object_key):
        """Sets the cloud_storage_pool_object_key of this ObjectMetadataLocation.

        The key for the object in the Cloud Storage Pool  # noqa: E501

        :param cloud_storage_pool_object_key: The cloud_storage_pool_object_key of this ObjectMetadataLocation.  # noqa: E501
        :type: str
        """

        self._cloud_storage_pool_object_key = cloud_storage_pool_object_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectMetadataLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectMetadataLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
