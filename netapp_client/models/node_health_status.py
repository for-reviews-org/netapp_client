# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeHealthStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'site_id': 'str',
        'site_name': 'str',
        'severity': 'str',
        'state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'site_id': 'siteId',
        'site_name': 'siteName',
        'severity': 'severity',
        'state': 'state'
    }

    def __init__(self, id=None, name=None, site_id=None, site_name=None, severity=None, state=None):  # noqa: E501
        """NodeHealthStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._site_id = None
        self._site_name = None
        self._severity = None
        self._state = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.site_id = site_id
        self.site_name = site_name
        self.severity = severity
        self.state = state

    @property
    def id(self):
        """Gets the id of this NodeHealthStatus.  # noqa: E501


        :return: The id of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeHealthStatus.


        :param id: The id of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this NodeHealthStatus.  # noqa: E501


        :return: The name of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeHealthStatus.


        :param name: The name of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def site_id(self):
        """Gets the site_id of this NodeHealthStatus.  # noqa: E501


        :return: The site_id of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this NodeHealthStatus.


        :param site_id: The site_id of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if site_id is None:
            raise ValueError("Invalid value for `site_id`, must not be `None`")  # noqa: E501

        self._site_id = site_id

    @property
    def site_name(self):
        """Gets the site_name of this NodeHealthStatus.  # noqa: E501


        :return: The site_name of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this NodeHealthStatus.


        :param site_name: The site_name of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")  # noqa: E501

        self._site_name = site_name

    @property
    def severity(self):
        """Gets the severity of this NodeHealthStatus.  # noqa: E501


        :return: The severity of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NodeHealthStatus.


        :param severity: The severity of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["normal", "minor", "major", "critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def state(self):
        """Gets the state of this NodeHealthStatus.  # noqa: E501


        :return: The state of this NodeHealthStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeHealthStatus.


        :param state: The state of this NodeHealthStatus.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["administratively-down", "connected", "unknown"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeHealthStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeHealthStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
