# coding: utf-8

"""
    StorageGRID Management API v3

    REST API for managing StorageGRID deployments. Copyright (c) 2021 NetApp, Inc. All Rights Reserved  # noqa: E501

    OpenAPI spec version: 3.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthTopologyComponentLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'HealthTopologyName',
        'type': 'str',
        'oid': 'HealthTopologyOid',
        'state': 'HealthTopologyState',
        'severity': 'HealthTopologySeverity',
        'code': 'str',
        'children': 'list[HealthTopologySubcomponentLevel]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'oid': 'oid',
        'state': 'state',
        'severity': 'severity',
        'code': 'code',
        'children': 'children'
    }

    def __init__(self, name=None, type=None, oid=None, state=None, severity=None, code=None, children=None):  # noqa: E501
        """HealthTopologyComponentLevel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._oid = None
        self._state = None
        self._severity = None
        self._code = None
        self._children = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.type = type
        self.oid = oid
        self.state = state
        self.severity = severity
        self.code = code
        if children is not None:
            self.children = children

    @property
    def name(self):
        """Gets the name of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The name of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: HealthTopologyName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthTopologyComponentLevel.


        :param name: The name of this HealthTopologyComponentLevel.  # noqa: E501
        :type: HealthTopologyName
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The type of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HealthTopologyComponentLevel.


        :param type: The type of this HealthTopologyComponentLevel.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["component"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def oid(self):
        """Gets the oid of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The oid of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: HealthTopologyOid
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this HealthTopologyComponentLevel.


        :param oid: The oid of this HealthTopologyComponentLevel.  # noqa: E501
        :type: HealthTopologyOid
        """
        if oid is None:
            raise ValueError("Invalid value for `oid`, must not be `None`")  # noqa: E501

        self._oid = oid

    @property
    def state(self):
        """Gets the state of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The state of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: HealthTopologyState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HealthTopologyComponentLevel.


        :param state: The state of this HealthTopologyComponentLevel.  # noqa: E501
        :type: HealthTopologyState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def severity(self):
        """Gets the severity of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The severity of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: HealthTopologySeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this HealthTopologyComponentLevel.


        :param severity: The severity of this HealthTopologyComponentLevel.  # noqa: E501
        :type: HealthTopologySeverity
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def code(self):
        """Gets the code of this HealthTopologyComponentLevel.  # noqa: E501

        a four-letter code to identify the type of this component  # noqa: E501

        :return: The code of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this HealthTopologyComponentLevel.

        a four-letter code to identify the type of this component  # noqa: E501

        :param code: The code of this HealthTopologyComponentLevel.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def children(self):
        """Gets the children of this HealthTopologyComponentLevel.  # noqa: E501


        :return: The children of this HealthTopologyComponentLevel.  # noqa: E501
        :rtype: list[HealthTopologySubcomponentLevel]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this HealthTopologyComponentLevel.


        :param children: The children of this HealthTopologyComponentLevel.  # noqa: E501
        :type: list[HealthTopologySubcomponentLevel]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthTopologyComponentLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthTopologyComponentLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
